#Использовать "./internal"

Перем СписокСеансов;
Перем ПутьПроекта;
Перем МодульПрокси;

#Область СлужебныйПрограммныйИнтерфейс

Функция Инициализировать(ПутьПроекта_, МодульПрокси_) Экспорт

	СписокСеансов = Новый Соответствие;
	ПутьПроекта   = ПутьПроекта_;
	МодульПрокси  = МодульПрокси_;

КонецФункции

Функция АвторизоватьСеанс(Контекст) Экспорт

	Результат = Ложь;

	Если Контекст.Запрос.Метод <> "POST" Тогда
		Возврат ОшибкаОбработки(Контекст, 405, "Method Not Allowed");
	КонецЕсли;

	ДлинаКонтента = Контекст.Запрос.ДлинаКонтента;
	ДлинаКонтента = ?(ДлинаКонтента = Неопределено, 0, ДлинаКонтента);

	Если ДлинаКонтента > 50000 Тогда
		Возврат ОшибкаОбработки(Контекст, 413, "Payload Too Large");
	КонецЕсли;

	ТелоЗапроса  = Контекст.Запрос.Тело;

	Попытка
		Пароль = Контекст.Запрос.Форма["password"][0];
	Исключение
		Возврат ОшибкаОбработки(Контекст, 400, "Bad Request");
	КонецПопытки;

	Если Пароль = ПарольПроекта() Тогда

		Печенье = Строка(Новый УникальныйИдентификатор());

		Пока СписокСеансов.Получить(Печенье) <> Неопределено Цикл
			Печенье = Строка(Новый УникальныйИдентификатор());
		КонецЦикла;

		СписокСеансов.Вставить(Печенье, Истина);

		Контекст.Ответ.Куки.Добавить("melezh", Печенье);
		Контекст.Ответ.КодСостояния = 200;

		Результат = Новый Структура("result", Истина);

	Иначе

		Результат = ОшибкаОбработки(Контекст, 400, "Неверный пароль!");

	КонецЕсли;

	ВыполнитьСборкуМусора();
	
	Возврат Результат;

КонецФункции

Функция АвторизованныйСеанс(Контекст) Экспорт

	ТокенАвторизации = ПолучитьАвторизациюCookie(Контекст);

	Если ЗначениеЗаполнено(ТокенАвторизации) Тогда

		Авторизован = СписокСеансов.Получить(ТокенАвторизации);
		Авторизован = ?(ЗначениеЗаполнено(Авторизован), Авторизован, Ложь);

	Иначе
		Авторизован = Ложь;
	КонецЕсли;

	Возврат Авторизован;

КонецФункции

Процедура УдалитьСеанс(Контекст) Экспорт

	ТокенАвторизации = ПолучитьАвторизациюCookie(Контекст);
	СписокСеансов.Удалить(ТокенАвторизации);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьАвторизациюCookie(Контекст)

	Печеньки = Контекст.Запрос.Куки;
	Токен    = "";

	Для Каждого Печенька Из Печеньки Цикл

		Если Печенька.Ключ = "melezh" Тогда
			Токен = Печенька.Значение;
		КонецЕсли;

	КонецЦикла;

	Возврат Токен;

КонецФункции

Функция ПарольПроекта()

	СоединениеRO = Инструментарий.СоздатьСоединениеRO(ПутьПроекта);
	Результат    = МодульПрокси.ПолучитьНастройкиПроекта(СоединениеRO);

	Если Результат["result"] Тогда
		
		Пароль = Неопределено;

		Для Каждого Настройка Из Результат["data"] Цикл

			Если Настройка["name"] = "ui_password" Тогда
				Возврат Настройка["value"];
			КонецЕсли;

		КонецЦикла;

		Если Пароль = Неопределено Тогда
			ВызватьИсключение "Пароль UI не был найден в настройках проекта. Возможно, файл проекта поврежден!";
		КонецЕсли;

	Иначе
		ВызватьИсключение Результат["message"];
	КонецЕсли;

КонецФункции

Функция ОшибкаОбработки(Контекст, Код, Текст)

    Контекст.Ответ.КодСостояния = Код;

    Возврат Новый Структура("result,error", Ложь, Текст);

КонецФункции

#КонецОбласти