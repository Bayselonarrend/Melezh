#Использовать oint
#Использовать "./internal"
#Использовать "../../../../../../extensions"

Перем ОбъектОПИ;
Перем МодульПрокси;
Перем МенеджерСоединений;
Перем Логгер;
Перем ХранилищеНастроек;

#Область СлужебныйПрограммныйИнтерфейс

Процедура Инициализировать(ОбъектОПИ_, МодульПрокси_, МенеджерСоединений_, Логгер_, ХранилищеНастроек_) Экспорт

	ОбъектОПИ          = ОбъектОПИ_;
	МодульПрокси       = МодульПрокси_;
	МенеджерСоединений = МенеджерСоединений_;
    Логгер             = Логгер_;
    ХранилищеНастроек  = ХранилищеНастроек_;

КонецПроцедуры

Функция ОсновнаяОбработка(Знач Контекст, Знач Путь) Экспорт

    ТелоЗапроса = Неопределено;

    Попытка

        ОписаниеОбработчика = ПолучитьОбработчикЗапросов(Путь);

        Если ОписаниеОбработчика["result"] Тогда

            Обработчик = ОписаниеОбработчика["data"];
            Обработчик = ?(ТипЗнч(Обработчик) = Тип("Массив"), Обработчик[0], Обработчик);

            Результат   = ВыполнитьОбработку(Контекст, Обработчик, ТелоЗапроса);

        Иначе
            Результат = Toolbox.ОшибкаОбработки(Контекст, 404, "Обработчик не найден!");
        КонецЕсли;

    Исключение
        Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
    КонецПопытки;
    
    Логгер.ЗаписатьЛог(Контекст, ТелоЗапроса, Результат);

    ВыполнитьСборкуМусора();

    Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыполнитьОбработку(Контекст, Обработчик, ТелоЗапроса)

    Если Обработчик["active"] = 0 Тогда
        Возврат Toolbox.ОшибкаОбработки(Контекст, 403, "Данный обработчик был отключен на стороне сервера!");
    КонецЕсли;

    Метод            = вРег(Контекст.Запрос.Метод);
    МетодОбработчика = вРег(Обработчик["method"]);
    МетодПроверки    = ?(МетодОбработчика = "FORM" Или МетодОбработчика = "JSON", "POST", МетодОбработчика);

    Если Не Метод = МетодПроверки Тогда
        Возврат Toolbox.ОшибкаОбработки(Контекст, 405, "Метод " + Метод + " недоступен для этого обработчика!");
    КонецЕсли;

    Если МетодОбработчика = "GET" Тогда

        Результат = ВыполнитьОбработкуGet(Контекст, Обработчик);

    ИначеЕсли МетодОбработчика = "JSON" Тогда

        Результат = ВыполнитьОбработкуPost(Контекст, Обработчик, ТелоЗапроса);

    ИначеЕсли МетодОбработчика = "FORM" Тогда

        Результат = ВыполнитьОбработкуFormData(Контекст, Обработчик);

    Иначе

        Результат = Toolbox.ОшибкаОбработки(Контекст, 405, "Метод " + Метод + " недоступен для этого обработчика!");

    КонецЕсли;

    Возврат Результат;

КонецФункции

Функция ВыполнитьОбработкуGet(Контекст, Обработчик)

    Запрос    = Контекст.Запрос;
    Параметры = Запрос.Параметры;

    Возврат ВыполнитьУниверсальнуюОбработку(Контекст, Обработчик, Параметры);

КонецФункции

Функция ВыполнитьОбработкуPost(Контекст, Обработчик, ТелоЗапроса)

    Запрос = Контекст.Запрос;

    ЧтениеДанных = Новый ЧтениеДанных(Запрос.Тело);
    ТелоЗапроса  = ЧтениеДанных.Прочитать().ПолучитьДвоичныеДанные();

    ЧтениеJSON = Новый ЧтениеJSON();
    ЧтениеJSON.УстановитьСтроку(ПолучитьСтрокуИзДвоичныхДанных(ТелоЗапроса));

    Параметры = ПрочитатьJSON(ЧтениеJSON, Истина);
    ЧтениеJSON.Закрыть();

    Возврат ВыполнитьУниверсальнуюОбработку(Контекст, Обработчик, Параметры);

КонецФункции

Функция ВыполнитьОбработкуFormData(Контекст, Обработчик)

    #Если Клиент Тогда
        ВызватьИсключение "Метод недоступен на клиенте!";
    #Иначе

    Запрос = Контекст.Запрос;

    Если Не ЗначениеЗаполнено(Запрос.Форма) Тогда
        ВызватьИсключение "Не найдены данные формы в запросе!";
    КонецЕсли;

    Параметры    = РазобратьFormData(Запрос.Форма);

    Возврат ВыполнитьУниверсальнуюОбработку(Контекст, Обработчик, Параметры);

    #КонецЕсли

КонецФункции

Функция ВыполнитьУниверсальнуюОбработку(Контекст, Обработчик, Параметры)

    #Если Клиент Тогда
        ВызватьИсключение "Метод недоступен на клиенте!";
    #Иначе

    Аргументы = Обработчик["args"];
    Команда   = Обработчик["library"];
    Метод     = Обработчик["function"];

    МассивВФ        = Новый Массив;
    КотелПараметров = СформироватьКотелПараметров(Аргументы, Параметры);

    Для Каждого Параметр Из КотелПараметров Цикл

        ТекущееЗначение = Параметр.Значение;
        ТекущийКлюч     = Параметр.Ключ;

        Если ТипЗнч(ТекущееЗначение) = Тип("ДвоичныеДанные") Тогда

            //@skip-check missing-temporary-file-deletion
            ИВФ = ПолучитьИмяВременногоФайла();
            ТекущееЗначение.Записать(ИВФ);

            МассивВФ.Добавить(ИВФ);

            КотелПараметров.Вставить(ТекущийКлюч, ИВФ);

        ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("ФайлФормы") Тогда

            //@skip-check missing-temporary-file-deletion
            ИВФ = ПолучитьИмяВременногоФайла();

            ПотокФайла  = ТекущееЗначение.ОткрытьПотокЧтения();
            ПотокЗаписи = Новый ФайловыйПоток(ИВФ, РежимОткрытияФайла.ОткрытьИлиСоздать);

            ПотокФайла.КопироватьВ(ПотокЗаписи);

            ПотокФайла.Закрыть();
            ПотокЗаписи.Закрыть();

            МассивВФ.Добавить(ИВФ);

            КотелПараметров.Вставить(ТекущийКлюч, ИВФ);

        Иначе
            OPI_ПреобразованиеТипов.ПолучитьСтроку(ТекущееЗначение);
            КотелПараметров.Вставить(ТекущийКлюч, ТекущееЗначение);
        КонецЕсли;

    КонецЦикла;

    СтруктураВыполнения = ОбъектОПИ.СформироватьСтрокуВызоваМетода(КотелПараметров, Команда, Метод);

    Ответ = Неопределено;

    Если СтруктураВыполнения["Ошибка"] Тогда
        Ответ = Новый Структура("result,error", Ложь, "Ошибка в названии команды или функции обработчика!");
    Иначе

        ТекстВыполнения = СтруктураВыполнения["Результат"];

        Выполнить(ТекстВыполнения);

        Если Не ТипЗнч(Ответ) = Тип("ДвоичныеДанные") И ХранилищеНастроек.ВернутьНастройку("res_wrapper") Тогда
            Ответ = Новый Структура("result,data", Истина, Ответ);
        КонецЕсли;

    КонецЕсли;

    Попытка

        Для Каждого ВременныйФайл Из МассивВФ Цикл
            УдалитьФайлы(ВременныйФайл);
        КонецЦикла;

    Исключение
        Сообщить("Не удалось удалить временные файлы!");
    КонецПопытки;

    Возврат Ответ;

    #КонецЕсли

КонецФункции

Функция СформироватьКотелПараметров(Аргументы, Параметры)

    АргументыСтрогие   = Новый Соответствие;
    АргументыНестрогие = Новый Соответствие;

    Для Каждого Аргумент Из Аргументы Цикл

        Ключ     = "--" + Аргумент["arg"];
        Значение = Аргумент["value"];
        Значение = ?(СтрНачинаетсяС(Значение    , """"), Прав(Значение, СтрДлина(Значение) - 1), Значение);
        Значение = ?(СтрЗаканчиваетсяНа(Значение, """"), Лев(Значение , СтрДлина(Значение) - 1), Значение);

        Если Аргумент["strict"] = 1 Тогда
            АргументыСтрогие.Вставить(Ключ, Значение);
        Иначе
            АргументыНестрогие.Вставить(Ключ, Значение);
        КонецЕсли;

    КонецЦикла;

    КотелПараметров = АргументыНестрогие;

    Для Каждого Параметр Из Параметры Цикл

        Значение = Параметр.Значение;

        Если ТипЗнч(Значение) = Тип("Строка") Тогда
            Значение = ?(СтрНачинаетсяС(Значение    , """"), Прав(Значение, СтрДлина(Значение) - 1), Значение);
            Значение = ?(СтрЗаканчиваетсяНа(Значение, """"), Лев(Значение , СтрДлина(Значение) - 1), Значение);
        КонецЕсли;

        КотелПараметров.Вставить("--" + Параметр.Ключ, Значение);

    КонецЦикла;

    Для Каждого Аргумент Из АргументыСтрогие Цикл
        КотелПараметров.Вставить(Аргумент.Ключ, Аргумент.Значение);
    КонецЦикла;

    Возврат КотелПараметров;

КонецФункции

Функция ПолучитьОбработчикЗапросов(Путь)

    СоединениеRO      = МенеджерСоединений.ПолучитьСоединениеRO();
    ТекущийОбработчик = МодульПрокси.ПолучитьОбработчикЗапросов(СоединениеRO, Путь);

    Возврат ТекущийОбработчик;

КонецФункции

Функция РазобратьFormData(Знач Форма) Экспорт

    СоответствиеДанных = Новый Соответствие;
    Файлы              = Форма.Файлы;

    Для Каждого Поле Из Форма Цикл

        СоответствиеДанных.Вставить(Поле.Ключ, Поле.Значение);

    КонецЦикла;

    Для Каждого Файл Из Файлы Цикл

        СоответствиеДанных.Вставить(Файл.Имя, Файл);

    КонецЦикла;

    Возврат СоответствиеДанных;

КонецФункции

#КонецОбласти