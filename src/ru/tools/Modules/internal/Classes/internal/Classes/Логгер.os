Перем ХранилищеНастроек;

#Область СлужебныйПрограммныйИнтерфейс

Процедура Инициализировать(ХранилищеНастроек_) Экспорт

	ХранилищеНастроек = ХранилищеНастроек_;
	
КонецПроцедуры

Процедура ЗаписатьЛог(Контекст, ТелоЗапроса) Экспорт

	ПутьЛогов  = ХранилищеНастроек.ВернутьНастройку("logs_path");

	Обработчик = Контекст.Запрос.Путь;
	Обработчик = СтрЗаменить(Обработчик, "/", "");

	Если СтрНачинаетсяС(Обработчик, "api") Или СтрНачинаетсяС(Обработчик, "ui") Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ПутьЛогов) Тогда
		Возврат;
	Иначе

		ДатаЗапроса   = ТекущаяДата();
		ПутьДляЗаписи = ОрганизоватьКаталогЛога(ПутьЛогов, ДатаЗапроса, Обработчик);

	КонецЕсли;

	ЗаписыватьИнформациюЗапроса = ХранилищеНастроек.ВернутьНастройку("logs_req_info");
	ЗаписыватьТелоЗапроса       = ХранилищеНастроек.ВернутьНастройку("logs_req_body");
	ЗаписыватьЗаголовкиЗапроса  = ХранилищеНастроек.ВернутьНастройку("logs_req_info");
	ЗаписыватьТелоОтвета        = ХранилищеНастроек.ВернутьНастройку("logs_res_body");

	МаксимальныйРазмерЗапроса   = ХранилищеНастроек.ВернутьНастройку("logs_req_max_size");
	МаксимальныйРазмерОтвета    = ХранилищеНастроек.ВернутьНастройку("logs_res_max_size");

	Если ЗаписыватьИнформациюЗапроса Тогда
		ЗаписатьИнформациюЗапроса(ПутьДляЗаписи, Контекст);
	КонецЕсли;

	Если ЗаписыватьТелоЗапроса И ТелоЗапроса <> Неопределено Тогда

		Если ТелоЗапроса.Размер() <= Число(МаксимальныйРазмерЗапроса) Тогда
			ЗаписатьФайлЛога(ПутьДляЗаписи, "req_body.log", ТелоЗапроса);
		Иначе
			Информация = ПолучитьДвоичныеДанныеИзСтроки("Тело запроса не было записано, т.к. максимальный размер был превышен!");
			ЗаписатьФайлЛога(ПутьДляЗаписи, "req_body.log", Информация);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОрганизоватьКаталогЛога(Знач ПутьЛогов, Знач Дата, Знач Обработчик)

	ОсновнойКаталогЛогов = ПроверитьСоздатьКаталог(ПутьЛогов);

	КаталогОбработчика = СтрШаблон("%1/%2", ОсновнойКаталогЛогов, Строка(Обработчик));
	КаталогОбработчика = ПроверитьСоздатьКаталог(КаталогОбработчика);

	КаталогДаты = СтрШаблон("%1/%2", КаталогОбработчика, Формат(Дата, "ДФ=yyyy-MM-dd"));
	КаталогДаты = ПроверитьСоздатьКаталог(КаталогДаты);

	Идентификатор = Лев(Строка(Новый УникальныйИдентификатор), 8);

	КаталогЗапроса = СтрШаблон("%1/%2-%3", КаталогДаты, Формат(Дата, "ДФ=hh-mm-ss"), Идентификатор);
	КаталогЗапроса = ПроверитьСоздатьКаталог(КаталогЗапроса);

	Возврат КаталогЗапроса;

КонецФункции

Функция ПроверитьСоздатьКаталог(Знач Путь)

	Путь = СтрЗаменить(Путь, "\", "/");
	Путь = ?(СтрЗаканчиваетсяНа(Путь, "/"), Лев(Путь, СтрДлина(Путь) - 1), Путь);

	ФайлКаталог = Новый Файл(Путь);

	Если Не ФайлКаталог.Существует() Тогда
		СоздатьКаталог(Путь);
	КонецЕсли;

	Возврат Путь;

КонецФункции

Функция ЗаписатьИнформациюЗапроса(Знач ПутьЛогов, Знач Контекст)

КонецФункции

Процедура ЗаписатьФайлЛога(ПутьЛогов, ИмяФайла, Данные)

	Данные.Записать(СтрШаблон("%1/%2", ПутьЛогов, ИмяФайла));

КонецПроцедуры

#КонецОбласти
