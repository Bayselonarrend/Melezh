Перем ТаблицаСловаря;
Перем КаталогОригинала;
Перем Файлы;

Процедура ПеревестиПроект(Знач ФайлыМодулей, Знач КаталогФайлов) Экспорт

	Файлы = ФайлыМодулей;
	КаталогОригинала = КаталогФайлов;

	ТаблицаСловаря = Новый ТаблицаЗначений();
	ТаблицаСловаря.Колонки.Добавить("Ключ");
	ТаблицаСловаря.Колонки.Добавить("Значение");
	ТаблицаСловаря.Колонки.Добавить("Длина");

	ПеревестиПоСловарю();

КонецПроцедуры

Процедура ПеревестиПоСловарю();

	ПутьПеревода = "./src/en";
	ПутьСловаря  = "./service/dictionaries/en.json";
	Словарь      = Новый Файл(ПутьСловаря);

	Если Не Словарь.Существует() Тогда
		Возврат;
	КонецЕсли;

	КаталогПриемник = Новый Файл(ПутьПеревода);
	ПутьКСловарю    = Словарь.ПолноеИмя;
	Язык            = Словарь.ИмяБезРасширения;

	ПолучитьТаблицуСловаря(ПутьКСловарю);

	СкопироватьФайлы(Файлы, КаталогПриемник);

	ФайлыМодулей  = НайтиФайлы(ПутьПеревода, "*", Истина);

	Для Каждого ФайлМодуля Из ФайлыМодулей Цикл

		Если ФайлМодуля.ЭтоКаталог() 
			Или ФайлМодуля.Имя = "packagedef"
			Или СтрНайти(ФайлМодуля.Путь, "addins") <> 0
			Или СтрНайти(ФайлМодуля.Путь, "/env/") <> 0
			Или СтрНайти(ФайлМодуля.Путь, "\env\") <> 0
			Или ФайлМодуля.Расширение = ".addin"
			Или ФайлМодуля.Расширение = ".zip"
			Или ФайлМодуля.Расширение = ".ico"
			Или ФайлМодуля.Расширение = ".png" Тогда
			Продолжить;
		КонецЕсли;

		ПеревестиМодуль(ФайлМодуля.ПолноеИмя);

	КонецЦикла;

КонецПроцедуры


Процедура ПеревестиМодуль(ПутьКМодулю)

	ДокументМодуля = Новый ТекстовыйДокумент();
	ДокументМодуля.Прочитать(ПутьКМодулю, "UTF-8");

	Для Н = 1 По ДокументМодуля.КоличествоСтрок() Цикл

		ТекущаяСтрока = СокрЛП(ДокументМодуля.ПолучитьСтроку(Н));

		Если Не ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			Продолжить;
		КонецЕсли;

		Пока СтрНайти(ТекущаяСтрока, "  ") <> 0 Цикл

			Если СтрНайти(ПутьКМодулю, "Help.os") <> 0 Тогда
				Прервать;
			КонецЕсли;

			ТекущаяСтрока = СтрЗаменить(ТекущаяСтрока, "  ", " ");
		КонецЦикла;

		ВыводимаяСтрока = СтрЗаменить(ДокументМодуля.ПолучитьСтроку(Н), СокрЛП(ДокументМодуля.ПолучитьСтроку(Н)), ТекущаяСтрока);
		ДокументМодуля.ЗаменитьСтроку(Н, ВыводимаяСтрока);

	КонецЦикла;

	ТекстМодуля = ДокументМодуля.ПолучитьТекст();

	Для Каждого Элемент Из ТаблицаСловаря Цикл

		ТекущееЗначение = Элемент.Значение;

		Пока СтрДлина(ТекущееЗначение) < Элемент.Длина Цикл
			ТекущееЗначение = ТекущееЗначение + " ";
		КонецЦикла;

		ТекстМодуля = СтрЗаменить(ТекстМодуля, Элемент.Ключ, Элемент.Значение);
	КонецЦикла;

	ОбработатьНесовпаденияOneScript(ТекстМодуля, ПутьКМодулю);

	ДвоичныеМодуля = ПолучитьДвоичныеДанныеИзСтроки(ТекстМодуля);
	ДвоичныеМодуля.Записать(ПутьКМодулю);

КонецПроцедуры

Процедура ПолучитьТаблицуСловаря(ПутьКСловарю)

	Сообщить("Чтение словаря " + ПутьКСловарю);
	ТаблицаСловаря.Очистить();

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ПутьКСловарю);
	ДанныеСловаря = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();

	Для Каждого Элемент Из ДанныеСловаря Цикл

		НоваяСтрокаСловаря = ТаблицаСловаря.Добавить();
		НоваяСтрокаСловаря.Ключ      = Элемент.Ключ;
		НоваяСтрокаСловаря.Значение  = Элемент.Значение;
		НоваяСтрокаСловаря.Длина     = СтрДлина(Элемент.Ключ);

	КонецЦикла;

	ТаблицаСловаря.Сортировать("Длина УБЫВ");

	ПутьКСловарюКлючевыхСлов = "./service/dictionaries/en_post.json";
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ПутьКСловарюКлючевыхСлов);
	СоответствиеКС = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();

	Для Каждого КлючевоеСлово Из СоответствиеКС Цикл
		НоваяСтрокаСловаря = ТаблицаСловаря.Добавить();
		НоваяСтрокаСловаря.Ключ      = КлючевоеСлово.Ключ;
		НоваяСтрокаСловаря.Значение  = КлючевоеСлово.Значение;
		НоваяСтрокаСловаря.Длина     = СтрДлина(КлючевоеСлово.Ключ);
	КонецЦикла;

КонецПроцедуры

Процедура СкопироватьФайлы(Знач МассивФайлов, Знач КаталогПриемник)
	
	ПутьПриемник = КаталогПриемник.ПолноеИмя;

	Если КаталогПриемник.Существует() Тогда
		УдалитьФайлы(ПутьПриемник);
	КонецЕсли;

	СоздатьКаталог(ПутьПриемник);

	Для Каждого Файл Из МассивФайлов Цикл
		Если Файл.ЭтоКаталог() Тогда

			ПолноеИмяИсточник = Файл.Имя;
			ПолноеИмяПриемник = ПутьПриемник + СтрЗаменить(Файл.ПолноеИмя, КаталогОригинала, "");
			
			СоздатьКаталог(ПолноеИмяПриемник);	

		КонецЕсли;
	КонецЦикла;	

	Для Каждого Файл Из МассивФайлов Цикл
		Если Не Файл.ЭтоКаталог() Тогда

			ПолноеИмяИсточник = Файл.ПолноеИмя;
			ПолноеИмяПриемник = ПутьПриемник + СтрЗаменить(Файл.ПолноеИмя, КаталогОригинала, "");
			
			КопироватьФайл(ПолноеИмяИсточник, ПолноеИмяПриемник);

		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбработатьНесовпаденияOneScript(ТекстМодуля, ПутьКМодулю)

	СоответствиеОшибок = Новый Соответствие();
	СоответствиеОшибок.Вставить("ConcatBinaryData"                 , "СоединитьДвоичныеДанные"); // Исправлено в 2.0
	СоответствиеОшибок.Вставить("GetTestList"                      , "ПолучитьСписокТестов"); // Исправлено в 2.0
	СоответствиеОшибок.Вставить("Exists"                           , "Exist"); // Исправлено в 2.0
	СоответствиеОшибок.Вставить("SetBodyFromBinaryData"            , "SetBodyFromBinary"); // Исправлено в 2.0
	СоответствиеОшибок.Вставить("GetBodyAsBinaryData"              , "ПолучитьТелоКакДвоичныеДанные"); // Исправлено в 2.0
	СоответствиеОшибок.Вставить("FileCopy"                         , "CopyFile"); // Вопрос разных имен в 8.15 и более новых версиях
	СоответствиеОшибок.Вставить("GetBinaryDataFromString"          , "ПолучитьДвоичныеДанныеИзСтроки"); // В ПР
	СоответствиеОшибок.Вставить("GetHexStringFromBinaryData"       , "ПолучитьHexСтрокуИзДвоичныхДанных");
	СоответствиеОшибок.Вставить("SplitBinaryData"                  , "РазделитьДвоичныеДанные"); // В ПР
	СоответствиеОшибок.Вставить("GetStringFromBinaryData"          , "ПолучитьСтрокуИзДвоичныхДанных"); // В ПР
	СоответствиеОшибок.Вставить("GetBinaryDataBufferFromString"    , "ПолучитьБуферДвоичныхДанныхИзСтроки"); // В ПР
	СоответствиеОшибок.Вставить("GetBinaryDataFromHexString"       , "ПолучитьДвоичныеДанныеИзHexСтроки"); // В ПР
	СоответствиеОшибок.Вставить("GetBinaryDataBufferFromBinaryData", "ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных"); // В ПР
	СоответствиеОшибок.Вставить("GetBinaryDataBufferFromHexString" , "ПолучитьБуферДвоичныхДанныхИзHexСтроки"); // В ПР
	СоответствиеОшибок.Вставить("GetBinaryDataFromBinaryDataBuffer", "ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных"); // В ПР
	СоответствиеОшибок.Вставить("WeekDay"                          , "DayOfWeek"); // Не исправлено
	СоответствиеОшибок.Вставить("BinDir"                           , "ProgramDirectory");
	СоответствиеОшибок.Вставить("OutputEncoding"                   , "КодировкаВыходногоПотока");
	СоответствиеОшибок.Вставить("Console."                         , "Консоль.");
	СоответствиеОшибок.Вставить("ThisObject"                       , "ЭтотОбъект");
	СоответствиеОшибок.Вставить("PositionInStream"                 , "StreamPosition");

	ФайлМодуля = Новый Файл(ПутьКМодулю);

	Если СтрНайти(ФайлМодуля.Имя, ".os") <> 0 Тогда
		Для Каждого Ошибка Из СоответствиеОшибок Цикл
			ТекстМодуля = СтрЗаменить(ТекстМодуля, Ошибка.Ключ, Ошибка.Значение);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

//ПриСозданииОбъекта();