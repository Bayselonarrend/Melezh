Перем Репозиторий;
Перем Версия;
Перем ПутьКРепозиторию;
Перем Сервер;
Перем ПутьВыгрузки;
Перем Кугвин;
Перем Оскрипт;
Перем ПутьДвижка;
Перем DockerSh;
Перем DockerBat;


Процедура НачалоРаботы()
	
	Репозиторий = "https://github.com/Bayselonarrend/Melezh";
	Версия   = "0.2.0";

	//Локальные данные
	Кугвин            = "C:\cygwin64\bin\";
	ОСкрипт           = "C:\Program Files\OneScript\";
	ПутьДвижка        = "/cygdrive/c/engine/linux/";

	ПутьКРепозиторию  = "C:\ProgramData\Jenkins\.jenkins\workspace\Melezh_Release";
	
	DockerSh  = ПутьКРепозиторию + "\service\docker\install.sh";
	DockerBat = ПутьКРепозиторию + "\service\docker\install.bat";

	ПутьВыгрузки      = ПутьКРепозиторию + "\" + Версия + "\";

	//----------------

	ОбъектПутьВыгрузки = Новый Файл(ПутьВыгрузки);
	
	Если Не ОбъектПутьВыгрузки.Существует() Тогда
		СоздатьКаталог(ПутьВыгрузки);
	КонецЕсли;

	МассивЛокализаций = Новый Массив();

	СтруктураРус = Новый Структура();
	СтруктураРус.Вставить("ПутьCLI" , ПутьКРепозиторию + "\src\ru\core\Classes\app.os");
	СтруктураРус.Вставить("ПутьCLIP", ПутьКРепозиторию + "\src\ru");
	СтруктураРус.Вставить("Описание", "Melezh - gateway, предоставляющий единый настраиваемый API для работы с различными сервисами из набора OpenIntegrations и пользовательскими модулями через HTTP");
	СтруктураРус.Вставить("Префикс" , "ru");
	СтруктураРус.Вставить("Docker"  , ПутьКРепозиторию + "\service\docker\release\ru\Dockerfile");

	СтруктураАнг = Новый Структура();
	СтруктураАнг.Вставить("ПутьCLI" , ПутьКРепозиторию + "\src\en\core\Classes\app.os");
	СтруктураАнг.Вставить("ПутьCLIP", ПутьКРепозиторию + "\src\en");
	СтруктураАнг.Вставить("Описание", "Melezh -gateway, providing a unified customizable API for working with various services from the OpenIntegrations set and user modules via HTTP");
	СтруктураАнг.Вставить("Префикс" , "en");
	СтруктураАнг.Вставить("Docker"  , ПутьКРепозиторию + "\service\docker\release\en\Dockerfile");
 
	МассивЛокализаций.Добавить(СтруктураРус);
	МассивЛокализаций.Добавить(СтруктураАнг); 

	КаталогВыгрузки = Новый Файл(ПутьВыгрузки);
	Если КаталогВыгрузки.Существует() Тогда 
		УдалитьФайлы(ПутьВыгрузки);
	КонецЕсли;
 
	СоздатьКаталог(ПутьВыгрузки);
	Приостановить(2000);
  
	Для Каждого Локализация Из МассивЛокализаций Цикл
   
		СоздатьOSPX(Локализация);
		СоздатьПакеты(Локализация);
		СоздатьDockerfile(Локализация);
		
	КонецЦикла;

	//Draft 

	ФайлыРелиза = НайтиФайлы(ПутьВыгрузки, "*", Истина);

	Сообщить("Start GHCLI");

	Для Каждого ФайлРелиза Из ФайлыРелиза Цикл
		ЗапуститьПриложение("""C:\Program Files\GitHub CLI\gh.exe"" release delete-asset draft --yes --repo " + Репозиторий + " """ + ФайлРелиза.Имя + """", , Истина);
		ЗапуститьПриложение("""C:\Program Files\GitHub CLI\gh.exe"" release upload draft --repo " + Репозиторий + " """ + ФайлРелиза.ПолноеИмя + """", , Истина);
	КонецЦикла;

	Сообщить("End GHCLI");

КонецПроцедуры


Процедура СоздатьOSPX(Данные)
	
	Сообщить("Start OSPX");

	ПутьCLIP = Данные["ПутьCLIP"];
	Префикс  = Данные["Префикс"];

	СтандартноеИмяOSPX = "melezh-" + Версия + ".ospx";
	ИмяOSPX            = "melezh-" + Версия + "_" + Префикс + ".ospx";
	КонечныйПутьOSPX   = ПутьВыгрузки + ИмяOSPX;

	//OSPX
	
	СборкаOS         = "opm b -o ""C:/"" """ + ПутьCLIP + """";

	ЗапуститьПриложение(СборкаOS, , Истина);
	ПереместитьФайл("C:\" + СтандартноеИмяOSPX, КонечныйПутьOSPX);

	Приостановить(1000);
	ЗапуститьПриложение("opm install -f """ + КонечныйПутьOSPX + """", , Истина);
	Приостановить(1000);

	ЗапуститьПриложение("xcopy """ + ОСкрипт + "lib\melezh"" "".\ci\installer_set\share\oint\lib\melezh"" /e /y /i", , Истина);
	ЗапуститьПриложение("xcopy """ + ОСкрипт + "lib\opm"" "".\ci\installer_set\share\oint\lib\opm"" /e /y /i", , Истина);

	Сообщить("End OSPX");

КонецПроцедуры

Процедура СоздатьПакеты(Данные)
	  
	Сообщить("Start Пакеты");

	ТекстSh = "--name melezh"
	+ " -s dir"
	+ " --license mit"
	+ " --version " + Версия
	+ " --architecture all"
	+ " --description """ + Данные["Описание"] + """"
	+ " --url ""https://openintegrations.dev/docs/Addons/Melezh"""
	+ " --maintainer ""Anton Titovets <bayselonarrend@gmail.com>"""
	+ " --verbose"
	+ " ../ci/installer_set/=/usr";

	СоответствиеПакетов = Новый Соответствие();
	СоответствиеПакетов.Вставить("deb", "melezh_" + Версия + "_all_" + Данные["Префикс"] + ".deb");
	СоответствиеПакетов.Вставить("rpm", "melezh-" + Версия + "-1.noarch_" + Данные["Префикс"] + ".rpm");

	СоответствиеДополнений = Новый Соответствие();
	СоответствиеДополнений.Вставить("deb", " --depends oint ");
	СоответствиеДополнений.Вставить("rpm", " --rpm-os linux --depends libicu --depends oint ");

	Для Каждого Пакет Из СоответствиеПакетов Цикл

		MakeSh  = ПутьВыгрузки + "make" + Пакет.Ключ + ".sh";
		MakeBat = ПутьВыгрузки + "make" + Пакет.Ключ + ".bat";
		

		FPM = "chmod +x ../ci/installer_set/bin/melezh
		|fpm -t " + Пакет.Ключ + " -p " + Пакет.Значение + " "  + СоответствиеДополнений[Пакет.Ключ] + ТекстSh;
		FPM = ПолучитьДвоичныеДанныеИзСтроки(FPM);
		FPM.Записать(MakeSh);

		ТекстBat = "C:\cygwin64\bin\bash.exe """ + "make" + Пакет.Ключ + ".sh" + """";
		ТекстBat = ПолучитьДвоичныеДанныеИзСтроки(ТекстBat, "CP866");
		ТекстBat.Записать(MakeBat);

		ЗапуститьПриложение("make" + Пакет.Ключ + ".bat", ПутьВыгрузки, Истина);

		УдалитьФайлы(MakeBat);
		УдалитьФайлы(MakeSh);

	КонецЦикла;
	
	Сообщить("End Пакеты");

КонецПроцедуры

Процедура СоздатьDockerfile(Данные)

	Сообщить("Start Dockerfile");

	DockerZip = ПутьВыгрузки + СтрШаблон("melezh-docker-%1.zip", Данные["Префикс"]);
	ЗаписьZip = Новый ЗаписьZipФайла(DockerZip);

	ЗаписьZip.Добавить(Данные["Docker"], РежимСохраненияПутейZip.НеСохранятьПути);
	ЗаписьZip.Добавить(DockerSh, РежимСохраненияПутейZip.НеСохранятьПути);
	ЗаписьZip.Добавить(DockerBat, РежимСохраненияПутейZip.НеСохранятьПути);

	ЗаписьZip.Записать();

	Сообщить("End Dockerfile");

КонецПроцедуры

НачалоРаботы();