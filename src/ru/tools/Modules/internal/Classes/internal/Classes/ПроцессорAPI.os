#Использовать oint
#Использовать "./internal"

Перем МодульПрокси;
Перем МенеджерСоединений;
Перем ОбработчикСеансов;
Перем ОбъектОПИ;
Перем ТаблицаБиблиотек;
Перем ХранилищеНастроек;
Перем Логгер;

#Область СлужебныйПрограммныйИнтерфейс

Процедура Инициализировать(МодульПрокси_, МенеджерСоединений_, ОбработчикСеансов_, ОбъектОПИ_, ХранилищеНастроек_, Логгер_) Экспорт

	МодульПрокси       = МодульПрокси_;
	МенеджерСоединений = МенеджерСоединений_;
	ОбработчикСеансов  = ОбработчикСеансов_;
	ОбъектОПИ          = ОбъектОПИ_;
	ХранилищеНастроек  = ХранилищеНастроек_;
	Логгер             = Логгер_;

	ЗаполнитьСоставБиблиотек();

КонецПроцедуры

Функция ОсновнаяОбработка(Знач Контекст, Знач Путь) Экспорт

	Если Не ОбработчикСеансов.АвторизованныйСеанс(Контекст) Тогда
		ВыполнитьСборкуМусора();
		Возврат Инструментарий.ОшибкаОбработки(Контекст, 401, "Unauthorized. This API for UI purposes only");
	КонецЕсли;

	ЧастиПути = СтрРазделить(Путь, "/");
	НеНайдено = Ложь;
	Результат = Неопределено;

	Если ЧастиПути.Количество() >= 2 Тогда
		
		Команда = нРег(ЧастиПути[1]);

		Если Команда = "gethandlerslist" Тогда
			Результат = ВернутьСписокОбработчиков(Контекст);
		ИначеЕсли Команда = "updatestatus" Тогда
			Результат = ИзменитьСтатусОбработчика(Контекст);
		ИначеЕсли Команда = "getlibraries" Тогда
			Результат = ВернутьСписокБиблиотек(Контекст);
		ИначеЕсли Команда = "getfunctions" Тогда
			Результат = ВернутьСписокФункций(Контекст);
		ИначеЕсли Команда = "getargs" Тогда
			Результат = ВернутьСписокАргументов(Контекст);
		ИначеЕсли Команда = "createhandler" Тогда
			Результат = СоздатьОбработчик(Контекст);
		ИначеЕсли Команда = "gethandler" Тогда
			Результат = ВернутьОбработчик(Контекст);
		ИначеЕсли Команда = "edithandler" Тогда
			Результат = ИзменитьОбработчик(Контекст);
		ИначеЕсли Команда = "getnewkey" Тогда
			Результат = ВернутьНовыйКлючОбработчика(Контекст);
		ИначеЕсли Команда = "deletehandler" Тогда
			Результат = УдалитьОбработчикЗапросов(Контекст);
		ИначеЕсли Команда = "getsettings" Тогда
			Результат = ВернутьНастройкиПроекта(Контекст);
		ИначеЕсли Команда = "savesettings" Тогда
			Результат = ЗаписатьНастройкиПроекта(Контекст);
		ИначеЕсли Команда = "getlastevents" Тогда
			Результат = ВернутьПоследниеДействия(Контекст);
		Иначе
			НеНайдено = Истина;
		КонецЕсли;

	Иначе
		НеНайдено = Истина;
	КонецЕсли;

	Если НеНайдено Тогда
		Результат = Инструментарий.ОшибкаОбработки(Контекст, 404, "Not Found");
	КонецЕсли;
	
    Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВернутьСписокОбработчиков(Контекст)

	Попытка

		СоединениеRO = МенеджерСоединений.ПолучитьСоединениеRO();
		Результат    = МодульПрокси.ПолучитьСписокОбработчиковЗапросов(СоединениеRO);
		
	Исключение
		Результат = Инструментарий.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ВернутьСписокБиблиотек(Контекст)

	МассивБиблиотек = Новый Массив;

	Для Каждого Библиотека Из ТаблицаБиблиотек Цикл

		ИмяБиблиотеки       = Библиотека["Имя"];
		ЗаголовокБиблиотеки = Библиотека["Заголовок"];

		МассивБиблиотек.Добавить(Новый Структура("name,title", ИмяБиблиотеки, ЗаголовокБиблиотеки));

	КонецЦикла;

	Контекст.Ответ.КодСостояния = 200;
	Результат = Новый Структура("result,data", Истина, МассивБиблиотек);

	Возврат Результат;

КонецФункции

Функция ВернутьСписокФункций(Контекст)

	Попытка
		
		Библиотека = Контекст.Запрос.Форма["library"][0];
		Состав     = ОбъектОПИ.ПолучитьСостав(Библиотека).Скопировать();
		Состав.Свернуть("Метод");

		МассивФункций = Состав.ВыгрузитьКолонку("Метод");
		МассивОпций   = Новый Массив;

		Для Каждого ФункцияОПИ Из МассивФункций Цикл
			МассивОпций.Добавить(Новый Структура("name,title", ФункцияОПИ, Синонимайзер(ФункцияОПИ)));
		КонецЦикла;

		Результат = Новый Структура("result,data", Истина, МассивОпций);

	Исключение
		Результат = Инструментарий.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ВернутьСписокАргументов(Контекст)

	Попытка
		
		Библиотека = Контекст.Запрос.Форма["library"][0];
		Метод      = Контекст.Запрос.Форма["function"][0];

		Состав     = ОбъектОПИ.ПолучитьСостав(Библиотека).Скопировать();
		Состав.Свернуть("Метод,Параметр,Описание");

		СписокАргументов = Состав.НайтиСтроки(Новый Структура("Метод", Метод));

		МассивОпций   = Новый Массив;

		Для Каждого Аргумент Из СписокАргументов Цикл
			ТекущийПараметр = СтрЗаменить(Аргумент["Параметр"], "--", "");
			МассивОпций.Добавить(Новый Структура("arg,description", ТекущийПараметр, Аргумент["Описание"]));
		КонецЦикла;

		Результат = Новый Структура("result,data", Истина, МассивОпций);

	Исключение
		Результат = Инструментарий.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ВернутьНовыйКлючОбработчика(Контекст)

	СоединениеRO = МенеджерСоединений.ПолучитьСоединениеRO();
	НовыйКлюч    = МодульПрокси.ПолучитьУникальныйКлючОбработчика(СоединениеRO);

	КлючПолучен = ТипЗнч(НовыйКлюч) = Тип("Строка");
	НовыйКлюч   = ?(КлючПолучен, НовыйКлюч, НовыйКлюч["error"]);

	Если КлючПолучен Тогда
		Результат = Новый Структура("result,data", Истина, НовыйКлюч);
	Иначе
		Результат = Инструментарий.ОшибкаОбработки(Контекст, 500, НовыйКлюч);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция ВернутьНастройкиПроекта(Контекст)

	Попытка

		Результат    = ХранилищеНастроек.ВернутьНастройкиПроектаПолные();

	Исключение
		Результат = Инструментарий.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ВернутьПоследниеДействия(Контекст)

	Попытка
		Действия   = Логгер.ВернутьПоследниеДействия();
		Результат  = Новый Структура("result,data", Истина, Действия);
	Исключение
		Результат = Инструментарий.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ЗаписатьНастройкиПроекта(Контекст)

	Попытка

		Данные    = Инструментарий.ПолучитьJSON(Контекст);
		Результат = ХранилищеНастроек.ЗаписатьНастройкиПроекта(Данные);

	Исключение
		Результат = Инструментарий.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ВернутьОбработчик(Контекст)

	Попытка
		
		КлючОбработчика = Контекст.Запрос.Форма["key"][0];

		СоединениеRO = МенеджерСоединений.ПолучитьСоединениеRO();
		Результат    = МодульПрокси.ПолучитьОбработчикЗапросов(СоединениеRO, КлючОбработчика);

	Исключение
		Результат = Инструментарий.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ИзменитьСтатусОбработчика(Контекст)

	Результат = Неопределено;

	Попытка

		КлючОбработчика   = Контекст.Запрос.Форма["key"][0];
		СтатусОбработчика = Контекст.Запрос.Форма["active"][0];

		СоединениеRW      = МенеджерСоединений.ПолучитьСоединениеRW();
    	
		Если СтатусОбработчика = "0" Тогда
			Результат = МодульПрокси.ОтключитьОбработчикЗапросов(СоединениеRW, КлючОбработчика);
		Иначе
			Результат = МодульПрокси.ВключитьОбработчикЗапросов(СоединениеRW, КлючОбработчика);
		КонецЕсли;

		Если Результат["result"] Тогда
			Контекст.Ответ.КодСостояния = 200;
		Иначе
			Результат = Инструментарий.ОшибкаОбработки(Контекст, 400, Результат["error"]);
		КонецЕсли;

	Исключение
		Результат = Инструментарий.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция СоздатьОбработчик(Контекст)

	Результат       = Неопределено;
	UUIDОбработчика = Неопределено;
	СоединениеRW    = МенеджерСоединений.ПолучитьСоединениеRW();

	Попытка

		СтруктураОбработчика = Инструментарий.ПолучитьJSON(Контекст);

		Бибилотека = СтруктураОбработчика["library"];
		МетодОПИ   = СтруктураОбработчика["function"];
		МетодHTTP  = СтруктураОбработчика["method"];
		Аргументы  = СтруктураОбработчика["args"];
		UUID       = СтруктураОбработчика["key"];
	
		ТекущийОбработчик = МодульПрокси.ДобавитьОбработчикЗапросов(СоединениеRW, Бибилотека, МетодОПИ, МетодHTTP);

		Если Не ТекущийОбработчик["result"] Тогда
			ВызватьИсключение ТекущийОбработчик["error"];
		Иначе
			UUIDОбработчика = ТекущийОбработчик["key"];
		КонецЕсли;

		Результат = МодульПрокси.ОбновитьКлючОбработчика(СоединениеRW, UUIDОбработчика, UUID);

		Если Не Результат["result"] Тогда
			ВызватьИсключение Результат["error"];
		Иначе
			UUIDОбработчика = UUID;
		КонецЕсли;

		Для Каждого Аргумент Из Аргументы Цикл

			АргументИмя      = Аргумент["arg"];
			АргументЗначение = Аргумент["value"];
			АргументСтрогий  = Аргумент["strict"];

			Добавление = МодульПрокси.УстановитьАргументОбработчика(СоединениеRW, UUIDОбработчика, АргументИмя, АргументЗначение, АргументСтрогий);

			Если Не Добавление["result"] Тогда
				ВызватьИсключение Добавление["error"];
			КонецЕсли;

		КонецЦикла;

		Результат = Новый Структура("result", Истина);
		Контекст.Ответ.КодСостояния = 200;

	Исключение
		МодульПрокси.УдалитьОбработчикЗапросов(СоединениеRW, UUIDОбработчика);
		Результат = Инструментарий.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция УдалитьОбработчикЗапросов(Контекст)

	Попытка
		Обработчик    = Контекст.Запрос.Форма["key"][0];
		СоединениеRW  = МенеджерСоединений.ПолучитьСоединениеRO();
		Результат     = МодульПрокси.УдалитьОбработчикЗапросов(СоединениеRW, Обработчик);
	Исключение
		Результат = Инструментарий.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ИзменитьОбработчик(Контекст)

	Результат       = Неопределено;
	UUIDОбработчика = Неопределено;

	Попытка

		СтруктураОбработчика = Инструментарий.ПолучитьJSON(Контекст);
		UUID                 = СтруктураОбработчика["originalKey"];

		СоединениеRO      = МенеджерСоединений.ПолучитьСоединениеRO();
		СтарыйОбработчик  = МодульПрокси.ПолучитьОбработчикЗапросов(СоединениеRO, UUID);
		
		Если Не СтарыйОбработчик["result"] Тогда
			ВызватьИсключение СтарыйОбработчик["error"];
		Иначе

			СтарыйОбработчик = СтарыйОбработчик["data"];
			UUIDОбработчика  = СтарыйОбработчик["key"];
			
			СтарыйОбработчик.Вставить("originalKey", СтарыйОбработчик["key"]);

		КонецЕсли;

		ОбновитьДанныеОбработчика(UUIDОбработчика, СтруктураОбработчика);

		Результат = Новый Структура("result", Истина);
		Контекст.Ответ.КодСостояния = 200;

	Исключение
		ОбновитьДанныеОбработчика(UUIDОбработчика, СтарыйОбработчик);
		Результат = Инструментарий.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Процедура ОбновитьДанныеОбработчика(UUIDОбработчика, СтруктураОбработчика)

	НовыйКлюч  = СтруктураОбработчика["key"];
	Аргументы  = СтруктураОбработчика["args"];
	Бибилотека = СтруктураОбработчика["library"];
	МетодОПИ   = СтруктураОбработчика["function"];
	МетодHTTP  = СтруктураОбработчика["method"]; 

	СоединениеRW = МенеджерСоединений.ПолучитьСоединениеRW();

	Если НовыйКлюч <> UUIDОбработчика Тогда
		
		Результат = МодульПрокси.ОбновитьКлючОбработчика(СоединениеRW, UUIDОбработчика, НовыйКлюч);

		Если Не Результат["result"] Тогда
			ВызватьИсключение Результат["error"];
		Иначе
			UUIDОбработчика = НовыйКлюч;
		КонецЕсли;

	КонецЕсли;

	Очистка = МодульПрокси.ОчиститьАргументыОбработчика(СоединениеRW, UUIDОбработчика);

	Если Не Очистка["result"] Тогда
		ВызватьИсключение Очистка["error"];
	КонецЕсли;

	Для Каждого Аргумент Из Аргументы Цикл

		АргументИмя      = Аргумент["arg"];
		АргументЗначение = Аргумент["value"];
		АргументСтрогий  = Булево(Аргумент["strict"]);

		Добавление = МодульПрокси.УстановитьАргументОбработчика(СоединениеRW, UUIDОбработчика, АргументИмя, АргументЗначение, АргументСтрогий);

		Если Не Добавление["result"] Тогда
			ВызватьИсключение Добавление["error"];
		КонецЕсли;

	КонецЦикла;

	Обновление = МодульПрокси.ИзменитьОбработчикЗапросов(СоединениеRW
		, UUIDОбработчика
		, Бибилотека
		, МетодОПИ
		, МетодHTTP);

	Если Не Обновление["result"] Тогда
		ВызватьИсключение Обновление["error"];
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСоставБиблиотек()

	СоответствиеКоманд = ОбъектОПИ.ПолучитьСоответствиеКомандМодулей();
	ТаблицаБиблиотек   = Новый ТаблицаЗначений();

	ТаблицаБиблиотек.Колонки.Добавить("Имя");
	ТаблицаБиблиотек.Колонки.Добавить("Заголовок");

	Для Каждого Команда Из СоответствиеКоманд Цикл

		ИмяКоманды = Команда.Ключ;

		Если ИмяКоманды = "tools" Тогда
			Продолжить;
		КонецЕсли;

		Модуль  = СтрЗаменить(Команда.Значение, "OPI_", "");
		Синоним = Синонимайзер(Модуль);

		НоваяСтрока = ТаблицаБиблиотек.Добавить();
		НоваяСтрока.Имя       = ИмяКоманды;
		НоваяСтрока.Заголовок = Синоним;
		
	КонецЦикла;

КонецПроцедуры

 Функция Синонимайзер(ИмяРеквизита)
    
    Перем Синоним, Н, Символ, ПредСимвол, СледСимвол, Прописная, ПредПрописная, СледПрописная, ДлинаСтроки;
    
    Синоним     = ВРег(Сред(ИмяРеквизита, 1, 1));
    ДлинаСтроки = СтрДлина(ИмяРеквизита);

    Для Н = 2 По ДлинаСтроки Цикл

        Символ        = Сред(ИмяРеквизита, Н, 1);
        ПредСимвол    = Сред(ИмяРеквизита, Н - 1, 1);
        СледСимвол    = Сред(ИмяРеквизита, Н + 1, 1);

        Прописная     = Символ     = ВРег(Символ);
        ПредПрописная = ПредСимвол = ВРег(ПредСимвол);
        СледПрописная = СледСимвол = ВРег(СледСимвол);
        
        Если НЕ ПредПрописная И Прописная Тогда
            Синоним = Синоним + " " + Символ;
        ИначеЕсли Прописная И Не СледПрописная Тогда
            Синоним = Синоним + " " + Символ;
        Иначе
            Синоним = Синоним + Символ;
        Конецесли;

    КонецЦикла;

	МассивСлов = СтрРазделить(Синоним, " ");

	Для Н = 1 По МассивСлов.ВГраница() Цикл

		ТекущееСлово = МассивСлов[Н];

		Если СтрДлина(ТекущееСлово) = 1 Тогда
			МассивСлов[Н] = нРег(ТекущееСлово);
			Продолжить;
		Иначе

			ВторойСимвол = Сред(ТекущееСлово, 2, 1);

			Если ВторойСимвол = нРег(ВторойСимвол) Тогда
				МассивСлов[Н] = нРег(ТекущееСлово);
			Иначе
				МассивСлов[Н] = вРег(ТекущееСлово);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Синоним = СтрСоединить(МассивСлов, " ");

	ИзменитьРегистрНазваний(Синоним);

    Возврат Синоним;
    
КонецФункции

Процедура ИзменитьРегистрНазваний(Синоним)

	СоответствиеНазваний = Новый Соответствие();
	СоответствиеНазваний.Вставить("ozon", "Ozon");
	СоответствиеНазваний.Вставить("Bitrix 24", "Bitrix24");
	СоответствиеНазваний.Вставить("calendar", "Calendar");
	СоответствиеНазваний.Вставить("drive", "Drive");
	СоответствиеНазваний.Вставить("sheets", "Sheets");
	СоответствиеНазваний.Вставить("workspace", "Workspace");
	СоответствиеНазваний.Вставить("My SQL", "MySQL");
	СоответствиеНазваний.Вставить("Postgre SQL", "PostgreSQL");
	СоответствиеНазваний.Вставить("SQ lite", "SQLite");
	СоответствиеНазваний.Вставить("teams", "Teams");
	СоответствиеНазваний.Вставить("disk", "Disk");
	СоответствиеНазваний.Вставить("market", "Market");
	СоответствиеНазваний.Вставить("metrika", "Metrika");

	Для Каждого Название Из СоответствиеНазваний Цикл
		Синоним = СтрЗаменить(Синоним, Название.Ключ, Название.Значение);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти