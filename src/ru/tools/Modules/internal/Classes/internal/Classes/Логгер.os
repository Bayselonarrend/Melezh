Перем ХранилищеНастроек;
Перем ПоследниеДействия;
Перем ЧислоЗапросов;

#Область СлужебныйПрограммныйИнтерфейс

Процедура Инициализировать(ХранилищеНастроек_) Экспорт
	
	ХранилищеНастроек = ХранилищеНастроек_;
	ПоследниеДействия = Новый Массив;
	ЧислоЗапросов     = 0;
	
КонецПроцедуры

Процедура ЗаписатьЛог(Контекст, ТелоЗапроса) Экспорт
	
	Если Контекст.Ответ.КодСостояния = 404 Или Контекст.Ответ.КодСостояния = 403 Тогда
		Возврат;
	КонецЕсли;

	ЧислоЗапросов = ЧислоЗапросов + 1;
	
	Попытка
		ПутьЛогов  = ХранилищеНастроек.ВернутьНастройку("logs_path");
		
		Если Не ЗначениеЗаполнено(ПутьЛогов) Тогда
			Возврат;		
		КонецЕсли;
		
		Обработчик = Контекст.Запрос.Путь;
		Обработчик = СтрЗаменить(Обработчик, "/", "");
		
		ДатаЗапроса   = ТекущаяДата();
		Идентификатор = Лев(Строка(Новый УникальныйИдентификатор), 8);
		UUIDЗапроса   = СтрШаблон("%1-%2", Формат(ДатаЗапроса, "ДФ=hh-mm-ss"), Идентификатор);
		ПутьДляЗаписи = ОрганизоватьКаталогЛога(ПутьЛогов, ДатаЗапроса, Обработчик, UUIDЗапроса);
		
		Если ТелоЗапроса = Неопределено Тогда
			РазмерТела = 0;
		Иначе
			РазмерТела = ТелоЗапроса.Размер();
		КонецЕсли;
		
		ЗаписыватьТелоЗапроса       = ХранилищеНастроек.ВернутьНастройку("logs_req_body");
		ЗаписыватьЗаголовкиЗапроса  = ХранилищеНастроек.ВернутьНастройку("logs_req_info");
		ЗаписыватьТелоОтвета        = ХранилищеНастроек.ВернутьНастройку("logs_res_body");
		
		МаксимальныйРазмерЗапроса   = ХранилищеНастроек.ВернутьНастройку("logs_req_max_size");
		МаксимальныйРазмерОтвета    = ХранилищеНастроек.ВернутьНастройку("logs_res_max_size");
		
		ЗаписатьИнформациюЗапроса(ПутьДляЗаписи, Контекст, ДатаЗапроса, РазмерТела, UUIDЗапроса, Обработчик);
		
		Если ЗаписыватьТелоЗапроса И ТелоЗапроса <> Неопределено Тогда
			
			Если ТелоЗапроса.Размер() <= Число(МаксимальныйРазмерЗапроса) Тогда
				ЗаписатьФайлЛога(ПутьДляЗаписи, "req_body.log", ТелоЗапроса);
			Иначе
				Информация = ПолучитьДвоичныеДанныеИзСтроки("Тело запроса не было записано, т.к. максимальный размер был превышен!");
				ЗаписатьФайлЛога(ПутьДляЗаписи, "req_body.log", Информация);
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ЗаписатьФайлЛога(ПутьДляЗаписи, "log.error", ПолучитьДвоичныеДанныеИзСтроки(ОписаниеОшибки()));	
	КонецПопытки;
	
	ВыполнитьСборкуМусора();
	
КонецПроцедуры

Функция ВернутьПоследниеДействия() Экспорт
	Возврат ПоследниеДействия;
КонецФункции

Функция ВернутьДействия(Обрабочтик, Дата) Экспорт
	
	Результат  = Новый Массив;
	ПутьЛогов  = ХранилищеНастроек.ВернутьНастройку("logs_path");

	Если Не ЗначениеЗаполнено(ПутьЛогов) Тогда
		Возврат Результат;		
	КонецЕсли;

	ПутьЛогов = СтрЗаменить(ПутьЛогов, "\", "/");
	ПутьЛогов = ?(СтрЗаканчиваетсяНа(ПутьЛогов, "/"), Лев(ПутьЛогов, СтрДлина(ПутьЛогов) - 1), ПутьЛогов);

	ПутьЛогов = СтрШаблон("%1/%2/%3", ПутьЛогов, Обрабочтик, Дата);
	ФайлПути  = Новый Файл(ПутьЛогов);

	Если Не ФайлПути.Существует() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ФайлыИнформации = НайтиФайлы(ПутьЛогов, "req_info.json", Истина);

	Для Каждого ФайлИнформации Из ФайлыИнформации Цикл

		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.ОткрытьФайл(ФайлИнформации.ПолноеИмя);

		Данные = ПрочитатьJSON(ЧтениеJSON);
		Данные.Удалить("params");

		Результат.Добавить(Данные);
		ЧтениеJSON.Закрыть();

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ВернутьЧислоЗапросов() Экспорт
	Возврат ЧислоЗапросов;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОрганизоватьКаталогЛога(Знач ПутьЛогов, Знач Дата, Знач Обработчик, Знач UUID)
	
	ОсновнойКаталогЛогов = ПроверитьСоздатьКаталог(ПутьЛогов);
	
	КаталогОбработчика = СтрШаблон("%1/%2", ОсновнойКаталогЛогов, Строка(Обработчик));
	КаталогОбработчика = ПроверитьСоздатьКаталог(КаталогОбработчика);
	
	КаталогДаты = СтрШаблон("%1/%2", КаталогОбработчика, Формат(Дата, "ДФ=yyyy-MM-dd"));
	КаталогДаты = ПроверитьСоздатьКаталог(КаталогДаты);
	
	КаталогЗапроса = СтрШаблон("%1/%2", КаталогДаты, UUID);
	КаталогЗапроса = ПроверитьСоздатьКаталог(КаталогЗапроса);
	
	Возврат КаталогЗапроса;
	
КонецФункции

Функция ПроверитьСоздатьКаталог(Знач Путь)
	
	Путь = СтрЗаменить(Путь, "\", "/");
	Путь = ?(СтрЗаканчиваетсяНа(Путь, "/"), Лев(Путь, СтрДлина(Путь) - 1), Путь);
	
	ФайлКаталог = Новый Файл(Путь);
	
	Если Не ФайлКаталог.Существует() Тогда
		СоздатьКаталог(Путь);
	КонецЕсли;
	
	Возврат Путь;
	
КонецФункции

Функция ЗаписатьИнформациюЗапроса(Знач ПутьЛогов, Знач Контекст, Знач ДатаЗапроса, Знач РазмерТела, Знач UUIDЗапроса, Знач Обработчик)

	ТипКонтента = Контекст.Запрос.ТипКонтента;
	ТипКонтента = ?(ЗначениеЗаполнено(ТипКонтента), ТипКонтента, "<нет/неизвестно>");

	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("key"     , UUIDЗапроса);
	ДанныеЗапроса.Вставить("date"    , ДатаЗапроса);		
	ДанныеЗапроса.Вставить("method"  , Контекст.Запрос.Метод);
	ДанныеЗапроса.Вставить("type"    , ТипКонтента);
	ДанныеЗапроса.Вставить("size"    , РазмерТела);
	ДанныеЗапроса.Вставить("status"  , Контекст.Ответ.КодСостояния);
	ДанныеЗапроса.Вставить("handler" , Обработчик);

	ПоследниеДействия.Вставить(0, ДанныеЗапроса);
	
	Пока ПоследниеДействия.Количество() > 30 Цикл
		ПоследниеДействия.Удалить(ПоследниеДействия.Количество() - 1);
	КонецЦикла;

	ДанныеЗапроса.Вставить("protocol", Контекст.Запрос.Протокол);
	ДанныеЗапроса.Вставить("form"    , Контекст.Запрос.ЕстьФормыВТипеКонтента);
	ДанныеЗапроса.Вставить("params"  , Контекст.Запрос.Параметры);
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.ОткрытьФайл(СтрШаблон("%1/%2", ПутьЛогов, "req_info.json"));
	ЗаписатьJSON(ЗаписьJSON, ДанныеЗапроса);
	ЗаписьJSON.Закрыть();
	
КонецФункции


Процедура ЗаписатьФайлЛога(ПутьЛогов, ИмяФайла, Данные)
	
	Данные.Записать(СтрШаблон("%1/%2", ПутьЛогов, ИмяФайла));
	
КонецПроцедуры

#КонецОбласти
