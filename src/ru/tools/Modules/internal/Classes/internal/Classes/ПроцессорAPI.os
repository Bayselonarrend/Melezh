#Использовать oint

Перем МодульПрокси;
Перем СоединениеRO;
Перем ПутьПроекта;
Перем ОбработчикСеансов;
Перем ОбъектОПИ;
Перем ТаблицаБиблиотек;

#Область СлужебныйПрограммныйИнтерфейс

Функция Инициализировать(МодульПрокси_, СоединениеRO_, ПутьПроекта_, ОбработчикСеансов_, ОбъектОПИ_) Экспорт

	МодульПрокси      = МодульПрокси_;
	СоединениеRO      = СоединениеRO_;
	ПутьПроекта       = ПутьПроекта_;
	ОбработчикСеансов = ОбработчикСеансов_;
	ОбъектОПИ         = ОбъектОПИ_;

	ЗаполнитьСоставБиблиотек();

КонецФункции

Функция ОсновнаяОбработка(Знач Контекст, Знач Путь) Экспорт

	Если Не ОбработчикСеансов.АвторизованныйСеанс(Контекст) Тогда
		Возврат ОшибкаОбработки(Контекст, 401, "Unauthorized. This API for UI purposes only");
	КонецЕсли;

	ЧастиПути = СтрРазделить(Путь, "/");
	НеНайдено = Ложь;
	Результат = Неопределено;

	Если ЧастиПути.Количество() >= 2 Тогда
		
		Команда = нРег(ЧастиПути[1]);

		Если Команда = "gethandlerslist" Тогда
			Результат = ВернутьСписокОбработчиков();
		ИначеЕсли Команда = "updatestatus" Тогда
			Результат = ИзменитьСтатусОбработчика(Контекст);
		ИначеЕсли Команда = "getlibraries" Тогда
			Результат = ВернутьСписокБиблиотек();
		ИначеЕсли Команда = "getfunctions" Тогда
			Результат = ВернутьСписокФункций(Контекст);
		ИначеЕсли Команда = "getargs" Тогда
			Результат = ВернутьСписокАргументов(Контекст);
		Иначе
			НеНайдено = Истина;
		КонецЕсли;

	Иначе
		НеНайдено = Истина;
	КонецЕсли;

	Если НеНайдено Тогда
		Результат = ОшибкаОбработки(Контекст, 404, "Not Found");
	КонецЕсли;

    Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВернутьСписокОбработчиков()

	Результат = МодульПрокси.ПолучитьСписокОбработчиковЗапросов(СоединениеRO);

	Возврат Результат;

КонецФункции

Функция ВернутьСписокБиблиотек()

	МассивБиблиотек = Новый Массив;

	Для Каждого Библиотека Из ТаблицаБиблиотек Цикл

		ИмяБиблиотеки       = Библиотека["Имя"];
		ЗаголовокБиблиотеки = Библиотека["Заголовок"];

		МассивБиблиотек.Добавить(Новый Структура("name,title", ИмяБиблиотеки, ЗаголовокБиблиотеки));

	КонецЦикла;

	Результат = Новый Структура("result,data", Истина, МассивБиблиотек);

	Возврат Результат;

КонецФункции

Функция ВернутьСписокФункций(Контекст)

	Попытка
		
		Библиотека = Контекст.Запрос.Форма["library"][0];
		Состав     = ОбъектОПИ.ПолучитьСостав(Библиотека).Скопировать();
		Состав.Свернуть("Метод");

		МассивФункций = Состав.ВыгрузитьКолонку("Метод");
		МассивОпций   = Новый Массив;

		Для Каждого ФункцияОПИ Из МассивФункций Цикл
			МассивОпций.Добавить(Новый Структура("name,title", ФункцияОПИ, Синонимайзер(ФункцияОПИ)));
		КонецЦикла;

		Результат = Новый Структура("result,data", Истина, МассивОпций);

	Исключение
		Результат = ОшибкаОбработки(Контекст, "400", ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ВернутьСписокАргументов(Контекст)

	Попытка
		
		Библиотека = Контекст.Запрос.Форма["library"][0];
		Метод      = Контекст.Запрос.Форма["function"][0];

		Состав     = ОбъектОПИ.ПолучитьСостав(Библиотека).Скопировать();
		Состав.Свернуть("Метод,Параметр,Описание");

		СписокАргументов = Состав.НайтиСтроки(Новый Структура("Метод", Метод));

		МассивОпций   = Новый Массив;

		Для Каждого Аргумент Из СписокАргументов Цикл
			МассивОпций.Добавить(Новый Структура("name,description", Аргумент["Параметр"], Аргумент["Описание"]));
		КонецЦикла;

		Результат = Новый Структура("result,data", Истина, МассивОпций);

	Исключение
		Результат = ОшибкаОбработки(Контекст, "400", ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ИзменитьСтатусОбработчика(Контекст)

	Результат = Неопределено;

	Попытка

		КлючОбработчика   = Контекст.Запрос.Форма["key"][0];
		СтатусОбработчика = Контекст.Запрос.Форма["active"][0];

		Если СтатусОбработчика = "0" Тогда
			Результат = МодульПрокси.ОтключитьОбработчикЗапросов(ПутьПроекта, КлючОбработчика);
		Иначе
			Результат = МодульПрокси.ВключитьОбработчикЗапросов(ПутьПроекта, КлючОбработчика);
		КонецЕсли;

		Если Результат["result"] Тогда
			Контекст.Ответ.КодСостояния = 200;
		Иначе
			Результат = ОшибкаОбработки(Контекст, "400", Результат["error"]);
		КонецЕсли;

	Исключение
		Результат = ОшибкаОбработки(Контекст, "400", ОписаниеОшибки());
	КонецПопытки;

	Возврат Результат;

КонецФункции

Функция ОшибкаОбработки(Контекст, Код, Текст)

    Контекст.Ответ.КодСостояния = Код;

    Возврат Новый Структура("result,error", Ложь, Текст);

КонецФункции

Процедура ЗаполнитьСоставБиблиотек()

	СоответствиеКоманд = ОбъектОПИ.ПолучитьСоответствиеКомандМодулей();
	ТаблицаБиблиотек   = Новый ТаблицаЗначений();

	ТаблицаБиблиотек.Колонки.Добавить("Имя");
	ТаблицаБиблиотек.Колонки.Добавить("Заголовок");

	Для Каждого Команда Из СоответствиеКоманд Цикл

		ИмяКоманды = Команда.Ключ;

		Если ИмяКоманды = "tools" Тогда
			Продолжить;
		КонецЕсли;

		Модуль  = СтрЗаменить(Команда.Значение, "OPI_", "");
		Синоним = Синонимайзер(Модуль);

		НоваяСтрока = ТаблицаБиблиотек.Добавить();
		НоваяСтрока.Имя       = ИмяКоманды;
		НоваяСтрока.Заголовок = Синоним;
		
	КонецЦикла;

КонецПроцедуры

 Функция Синонимайзер(ИмяРеквизита)
    
    Перем Синоним, Н, Символ, ПредСимвол, СледСимвол, Прописная, ПредПрописная, СледПрописная, ДлинаСтроки;
    
    Синоним     = ВРег(Сред(ИмяРеквизита, 1, 1));
    ДлинаСтроки = СтрДлина(ИмяРеквизита);

    Для Н = 2 По ДлинаСтроки Цикл

        Символ        = Сред(ИмяРеквизита, Н, 1);
        ПредСимвол    = Сред(ИмяРеквизита, Н - 1, 1);
        СледСимвол    = Сред(ИмяРеквизита, Н + 1, 1);

        Прописная     = Символ     = ВРег(Символ);
        ПредПрописная = ПредСимвол = ВРег(ПредСимвол);
        СледПрописная = СледСимвол = ВРег(СледСимвол);
        
        Если НЕ ПредПрописная И Прописная Тогда
            Синоним = Синоним + " " + Символ;
        ИначеЕсли Прописная И Не СледПрописная Тогда
            Синоним = Синоним + " " + Символ;
        Иначе
            Синоним = Синоним + Символ;
        Конецесли;

    КонецЦикла;

	МассивСлов = СтрРазделить(Синоним, " ");

	Для Н = 1 По МассивСлов.ВГраница() Цикл

		ТекущееСлово = МассивСлов[Н];

		Если СтрДлина(ТекущееСлово) = 1 Тогда
			МассивСлов[Н] = нРег(ТекущееСлово);
			Продолжить;
		Иначе

			ВторойСимвол = Сред(ТекущееСлово, 2, 1);

			Если ВторойСимвол = нРег(ВторойСимвол) Тогда
				МассивСлов[Н] = нРег(ТекущееСлово);
			Иначе
				МассивСлов[Н] = вРег(ТекущееСлово);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Синоним = СтрСоединить(МассивСлов, " ");

	ИзменитьРегистрНазваний(Синоним);

    Возврат Синоним;
    
КонецФункции

Процедура ИзменитьРегистрНазваний(Синоним)

	СоответствиеНазваний = Новый Соответствие();
	СоответствиеНазваний.Вставить("ozon", "Ozon");
	СоответствиеНазваний.Вставить("Bitrix 24", "Bitrix24");
	СоответствиеНазваний.Вставить("calendar", "Calendar");
	СоответствиеНазваний.Вставить("drive", "Drive");
	СоответствиеНазваний.Вставить("sheets", "Sheets");
	СоответствиеНазваний.Вставить("workspace", "Workspace");
	СоответствиеНазваний.Вставить("My SQL", "MySQL");
	СоответствиеНазваний.Вставить("Postgre SQL", "PostgreSQL");
	СоответствиеНазваний.Вставить("SQ lite", "SQLite");
	СоответствиеНазваний.Вставить("teams", "Teams");
	СоответствиеНазваний.Вставить("disk", "Disk");
	СоответствиеНазваний.Вставить("market", "Market");
	СоответствиеНазваний.Вставить("metrika", "Metrika");

	Для Каждого Название Из СоответствиеНазваний Цикл
		Синоним = СтрЗаменить(Синоним, Название.Ключ, Название.Значение);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти