#Использовать oint
#Использовать "./internal"

Перем МодульПрокси;
Перем МенеджерСоединений;
Перем ОбработчикСеансов;
Перем ПроцессорРасширений;
Перем ОбъектОПИ;
Перем ТаблицаБиблиотек;
Перем ХранилищеНастроек;
Перем Логгер;
Перем ДатаСтарта;
Перем МассивСоветов;

#Область СлужебныйПрограммныйИнтерфейс

Процедура Инициализировать(МодульПрокси_, МенеджерСоединений_, ОбработчикСеансов_, ОбъектОПИ_, ХранилищеНастроек_, Логгер_, ПроцессорРасширений_) Экспорт
	
	МодульПрокси        = МодульПрокси_;
	МенеджерСоединений  = МенеджерСоединений_;
	ОбработчикСеансов   = ОбработчикСеансов_;
	ОбъектОПИ           = ОбъектОПИ_;
	ХранилищеНастроек   = ХранилищеНастроек_;
	Логгер              = Логгер_;
	ДатаСтарта          = ТекущаяДата();
	ПроцессорРасширений = ПроцессорРасширений_;
	
	ЗаполнитьСоставБиблиотек();
	ЗаполнитьСоветы();
	
КонецПроцедуры

Функция ОсновнаяОбработка(Знач Контекст, Знач Путь) Экспорт
	
	Если Не ОбработчикСеансов.АвторизованныйСеанс(Контекст) Тогда
		ВыполнитьСборкуМусора();
		Возврат Toolbox.ОшибкаОбработки(Контекст, 401, "Ошибка авторизации. Пожалуйста, обновите страницу");
	КонецЕсли;
	
	ЧастиПути = СтрРазделить(Путь, "/");
	НеНайдено = Ложь;
	Результат = Неопределено;
	
	Если ЧастиПути.Количество() >= 2 Тогда
		
		Команда = нРег(ЧастиПути[1]);
		
		Если Команда = "gethandlerslist" Тогда
			Результат = ВернутьСписокОбработчиков(Контекст);
		ИначеЕсли Команда = "updatestatus" Тогда
			Результат = ИзменитьСтатусОбработчика(Контекст);
		ИначеЕсли Команда = "getlibraries" Тогда
			Результат = ВернутьСписокБиблиотек(Контекст);
		ИначеЕсли Команда = "getfunctions" Тогда
			Результат = ВернутьСписокФункций(Контекст);
		ИначеЕсли Команда = "getargs" Тогда
			Результат = ВернутьСписокАргументов(Контекст);
		ИначеЕсли Команда = "createhandler" Тогда
			Результат = СоздатьОбработчик(Контекст);
		ИначеЕсли Команда = "gethandler" Тогда
			Результат = ВернутьОбработчик(Контекст);
		ИначеЕсли Команда = "edithandler" Тогда
			Результат = ИзменитьОбработчик(Контекст);
		ИначеЕсли Команда = "getnewkey" Тогда
			Результат = ВернутьНовыйКлючОбработчика(Контекст);
		ИначеЕсли Команда = "deletehandler" Тогда
			Результат = УдалитьОбработчикЗапросов(Контекст);
		ИначеЕсли Команда = "getsettings" Тогда
			Результат = ВернутьНастройкиПроекта(Контекст);
		ИначеЕсли Команда = "savesettings" Тогда
			Результат = ЗаписатьНастройкиПроекта(Контекст);
		ИначеЕсли Команда = "getlastevents" Тогда
			Результат = ВернутьПоследниеДействия(Контекст);
		ИначеЕсли Команда = "getevents" Тогда
			Результат = ВернутьДействия(Контекст);
		ИначеЕсли Команда = "getsessioninfo" Тогда
			Результат = ВернутьСтатистикуСессии(Контекст);
		ИначеЕсли Команда = "getrandomadvice" Тогда
			Результат = ВернутьСлучайныСовет(Контекст);
		ИначеЕсли Команда = "geteventdata" Тогда
			Результат = ВернутьИнформациюОСобытии(Контекст);
		ИначеЕсли Команда = "getextensionslist" Тогда
			Результат = ВернутьСписокРасширений(Контекст);
		ИначеЕсли Команда = "updateextensionsscache" Тогда
			Результат = ОбновитьКэшРасширений(Контекст);
		Иначе
			НеНайдено = Истина;
		КонецЕсли;
		
	Иначе
		НеНайдено = Истина;
	КонецЕсли;
	
	Если НеНайдено Тогда
		Результат = Toolbox.ОшибкаОбработки(Контекст, 404, "Not Found");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВернутьСписокОбработчиков(Контекст)
	
	Попытка
		
		СоединениеRO = МенеджерСоединений.ПолучитьСоединениеRO();
		Результат    = МодульПрокси.ПолучитьСписокОбработчиковЗапросов(СоединениеRO);
		
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьСписокБиблиотек(Контекст)
	
	МассивБиблиотек = Новый Массив;
	
	Для Каждого Библиотека Из ТаблицаБиблиотек Цикл
		
		ИмяБиблиотеки       = Библиотека["Имя"];
		ЗаголовокБиблиотеки = Библиотека["Заголовок"];
		
		МассивБиблиотек.Добавить(Новый Структура("name,title", ИмяБиблиотеки, ЗаголовокБиблиотеки));
		
	КонецЦикла;
	
	Контекст.Ответ.КодСостояния = 200;
	Результат = Новый Структура("result,data", Истина, МассивБиблиотек);
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьСписокФункций(Контекст)
	
	Попытка
		
		Библиотека = Контекст.Запрос.Форма["library"][0];
		Состав     = ОбъектОПИ.ПолучитьСостав(Библиотека).Скопировать();
		Состав.Свернуть("Метод");
		
		МассивФункций = Состав.ВыгрузитьКолонку("Метод");
		МассивОпций   = Новый Массив;
		
		Для Каждого ФункцияОПИ Из МассивФункций Цикл
			МассивОпций.Добавить(Новый Структура("name,title", ФункцияОПИ, Синонимайзер(ФункцияОПИ)));
		КонецЦикла;
		
		Результат = Новый Структура("result,data", Истина, МассивОпций);
		
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьСписокАргументов(Контекст)
	
	Попытка
		
		Библиотека = Контекст.Запрос.Форма["library"][0];
		Метод      = Контекст.Запрос.Форма["function"][0];
		
		Состав     = ОбъектОПИ.ПолучитьСостав(Библиотека).Скопировать();
		Состав.Свернуть("Метод,Параметр,Описание");
		
		СписокАргументов = Состав.НайтиСтроки(Новый Структура("Метод", Метод));
		
		МассивОпций   = Новый Массив;
		
		Для Каждого Аргумент Из СписокАргументов Цикл
			
			ТекущийПараметр = СтрЗаменить(Аргумент["Параметр"], "--", "");

			Если ТекущийПараметр = "melezhcontext" Тогда
				Продолжить;
			КонецЕсли;

			МассивОпций.Добавить(Новый Структура("arg,description", ТекущийПараметр, Аргумент["Описание"]));

		КонецЦикла;
		
		Результат = Новый Структура("result,data", Истина, МассивОпций);
		
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьНовыйКлючОбработчика(Контекст)
	
	СоединениеRO = МенеджерСоединений.ПолучитьСоединениеRO();
	НовыйКлюч    = МодульПрокси.ПолучитьУникальныйКлючОбработчика(СоединениеRO);
	
	КлючПолучен = ТипЗнч(НовыйКлюч) = Тип("Строка");
	НовыйКлюч   = ?(КлючПолучен, НовыйКлюч, НовыйКлюч["error"]);
	
	Если КлючПолучен Тогда
		Результат = Новый Структура("result,data", Истина, НовыйКлюч);
	Иначе
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, НовыйКлюч);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьНастройкиПроекта(Контекст)
	
	Попытка
		
		Результат = ХранилищеНастроек.ВернутьНастройкиПроектаUI();
		
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьПоследниеДействия(Контекст)
	
	Попытка
		Действия   = Логгер.ВернутьПоследниеДействия();
		Результат  = Новый Структура("result,data", Истина, Действия);
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьДействия(Контекст)
	
	Попытка
		
		Обработчик = Контекст.Запрос.Параметры["handler"];
		Дата       = Контекст.Запрос.Параметры["date"];
		
		Действия   = Логгер.ВернутьДействия(Обработчик, Дата);
		Результат  = Новый Структура("result,data", Истина, Действия);
		
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьСтатистикуСессии(Контекст)
	
	Попытка
		
		ЧислоЗапросов = Логгер.ВернутьЧислоЗапросов();
		Статистика    = Новый Структура("start,processed", ДатаСтарта, ЧислоЗапросов);
		
		Результат  = Новый Структура("result,data", Истина, Статистика);
		
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьСлучайныСовет(Контекст)
	
	Попытка
		
		ГенераторСЧ    = Новый ГенераторСлучайныхЧисел();
		СлучайноеЧисло = ГенераторСЧ.СлучайноеЧисло(0, МассивСоветов.Количество() - 1);
		Совет          = МассивСоветов[СлучайноеЧисло];
		
		Статистика    = Новый Структура("number,text", СлучайноеЧисло + 1, Совет);
		Результат     = Новый Структура("result,data", Истина, Статистика);
		
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьИнформациюОСобытии(Контекст)
	
	Попытка
		
		КлючЛога   = Строка(Контекст.Запрос.Параметры["key"]);
		КлючЛога   = СтрЗаменить(КлючЛога, "/", "%2F");
		ПутьЛогов  = ХранилищеНастроек.ВернутьНастройку("logs_path");
		
		Если Не ЗначениеЗаполнено(ПутьЛогов) Тогда
			Возврат Toolbox.ОшибкаОбработки(Контекст, 410, "Не указан путь логов для поиска!");
		КонецЕсли;
		
		ПутьЛога = НайтиФайлы(ПутьЛогов, КлючЛога, Истина);
		
		Если Не ЗначениеЗаполнено(ПутьЛога) Тогда
			Возврат Toolbox.ОшибкаОбработки(Контекст, 404, "Запись не найдена. Возможно, путь к каталогу логов был изменен!");
		Иначе
			КаталогЛога = ПутьЛога[0].ПолноеИмя;
		КонецЕсли;
		
		ФайлОшибки   = СтрШаблон("%1/%2", КаталогЛога, "error.json");
		ОбъектОшибки = Новый Файл(ФайлОшибки);
		
		ОсновнойФайл   = СтрШаблон("%1/%2", КаталогЛога, "req.info");
		ОсновнойОбъект = Новый Файл(ОсновнойФайл);
		
		Если Не ОсновнойОбъект.Существует() Тогда
			
			Если ОбъектОшибки.Существует() Тогда
				
				OPI_ПреобразованиеТипов.ПолучитьКоллекцию(ФайлОшибки);
				OPI_ПреобразованиеТипов.ПолучитьСтроку(ФайлОшибки);
				Ошибка = "Запись не была произведена корректно: " + ФайлОшибки;
				
			Иначе
				Ошибка = "Запись не была создана или повреждена!";
			КонецЕсли;
			
			Возврат Toolbox.ОшибкаОбработки(Контекст, 500, Ошибка);
			
		КонецЕсли;
		
		ОшибкаПовреждения = "Файл информации о запросе имеет неверный формат или поврежден!";
		OPI_ПреобразованиеТипов.ПолучитьКоллекциюКлючИЗначение(ОсновнойФайл, ОшибкаПовреждения);
		
		Если ОбъектОшибки.Существует() Тогда
			
			Попытка
				OPI_ПреобразованиеТипов.ПолучитьКоллекцию(ФайлОшибки);
				Ошибка = ФайлОшибки["error"];
			Исключение
				OPI_ПреобразованиеТипов.ПолучитьСтроку(ФайлОшибки, Истина);
				Ошибка = ФайлОшибки;
			КонецПопытки;
			
			ОсновнойФайл.Вставить("error", СтрШаблон("Запись лога была выполнена с ошибкой: %1", Ошибка));
		Иначе
			ОсновнойФайл.Вставить("error", "");
		КонецЕсли;
		
		ФайлЗаголовков   = СтрШаблон("%1/%2", КаталогЛога, "req.headers");
		ОбъектЗаголовокв = Новый Файл(ФайлЗаголовков);
		
		Если ОбъектЗаголовокв.Существует() Тогда
			OPI_ПреобразованиеТипов.ПолучитьКоллекцию(ФайлЗаголовков);
			ОсновнойФайл.Вставить("headers", ФайлЗаголовков);
		Иначе
			ОсновнойФайл.Вставить("headers", Новый Структура());
		КонецЕсли;

		ФайлОтвета = СтрШаблон("%1/%2", КаталогЛога, "res.body");
		ОбъектОтвета = Новый Файл(ФайлОтвета);

		Если ОбъектОтвета.Существует() Тогда

			ФайлОтвета_ = ФайлОтвета;
			OPI_ПреобразованиеТипов.ПолучитьКоллекцию(ФайлОтвета);

			Если ТипЗнч(ФайлОтвета) = Тип("Массив") И ФайлОтвета[0] = ФайлОтвета_ Тогда
				ФайлОтвета = Новый Структура("Файл", ФайлОтвета_);
			КонецЕсли;

			ОсновнойФайл.Вставить("res_body", ФайлОтвета);

		КонецЕсли;
		
		ФайлТела   = СтрШаблон("%1/%2", КаталогЛога, "req.body");
		ОбъектТела = Новый Файл(ФайлТела);
		
		Если ОбъектТела.Существует() Тогда
			
			OPI_ПреобразованиеТипов.ПолучитьКоллекцию(ФайлТела);
			
			Если ТипЗнч(ФайлТела) = Тип("Массив") Тогда
				
				ФайлыФормы = Новый Массив;
				
				Для Каждого Файл Из ФайлТела Цикл

					ОбъектФайла = Новый Файл(Файл);
					
					ТекущаяИнформацияФайла = Новый Структура;
					ТекущаяИнформацияФайла.Вставить("name"      , "-");
					ТекущаяИнформацияФайла.Вставить("file_name" , Строка(ОбъектФайла.Имя));
					ТекущаяИнформацияФайла.Вставить("type"      , "Полное тело запроса");
					ТекущаяИнформацияФайла.Вставить("size"      , ОбъектФайла.Размер());
					ТекущаяИнформацияФайла.Вставить("saved"     , Истина);
					ТекущаяИнформацияФайла.Вставить("saved_path", ОбъектФайла.ПолноеИмя);

					ФайлыФормы.Добавить(ТекущаяИнформацияФайла);
					
				КонецЦикла;
				
				ОсновнойФайл.Вставить("body", Новый Структура());
				ОсновнойФайл.Вставить("melezh_request_files", ФайлыФормы);
				
			Иначе
				
				ФайлыФормы = ФайлТела.Получить("melezh_request_files");
				ФайлТела.Удалить("melezh_request_files");
				
				Если Не ЗначениеЗаполнено(ФайлыФормы) Тогда
					ФайлыФормы = Новый Массив;
				КонецЕсли;
				
				ОсновнойФайл.Вставить("body", ФайлТела);
				ОсновнойФайл.Вставить("melezh_request_files", ФайлыФормы);
				
			КонецЕсли;
			
		Иначе
			ОсновнойФайл.Вставить("body", Новый Структура);
			ОсновнойФайл.Вставить("melezh_request_files", Новый Массив);
		КонецЕсли;
		
		Результат = Новый Структура("result,data", Истина, ОсновнойФайл);
		
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, СтрШаблон("Ошибка получения информации: %1", ОписаниеОшибки()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьНастройкиПроекта(Контекст)
	
	Попытка
		
		Данные    = Toolbox.ПолучитьJSON(Контекст);
		Результат = ХранилищеНастроек.ЗаписатьНастройкиПроекта(Данные);
		
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьОбработчик(Контекст)
	
	Попытка
		
		КлючОбработчика = Контекст.Запрос.Форма["key"][0];
		
		СоединениеRO = МенеджерСоединений.ПолучитьСоединениеRO();
		Результат    = МодульПрокси.ПолучитьОбработчикЗапросов(СоединениеRO, КлючОбработчика);
		
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ИзменитьСтатусОбработчика(Контекст)
	
	Результат = Неопределено;
	
	Попытка
		
		КлючОбработчика   = Контекст.Запрос.Форма["key"][0];
		СтатусОбработчика = Контекст.Запрос.Форма["active"][0];
		
		СоединениеRW      = МенеджерСоединений.ПолучитьСоединениеRW();
		
		Если СтатусОбработчика = "0" Тогда
			Результат = МодульПрокси.ОтключитьОбработчикЗапросов(СоединениеRW, КлючОбработчика);
		Иначе
			Результат = МодульПрокси.ВключитьОбработчикЗапросов(СоединениеRW, КлючОбработчика);
		КонецЕсли;
		
		Если Результат["result"] Тогда
			Контекст.Ответ.КодСостояния = 200;
		Иначе
			Результат = Toolbox.ОшибкаОбработки(Контекст, 400, Результат["error"]);
		КонецЕсли;
		
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьОбработчик(Контекст)
	
	Результат       = Неопределено;
	UUIDОбработчика = Неопределено;
	СоединениеRW    = МенеджерСоединений.ПолучитьСоединениеRW();
	
	Попытка
		
		СтруктураОбработчика = Toolbox.ПолучитьJSON(Контекст);
		
		Библиотека = СтруктураОбработчика["library"];
		МетодОПИ   = СтруктураОбработчика["function"];
		МетодHTTP  = СтруктураОбработчика["method"];
		Аргументы  = СтруктураОбработчика["args"];
		UUID       = СтруктураОбработчика["key"];
		
		ТекущийОбработчик = МодульПрокси.ДобавитьОбработчикЗапросов(СоединениеRW, Библиотека, МетодОПИ, МетодHTTP);
		
		Если Не ТекущийОбработчик["result"] Тогда
			ВызватьИсключение ТекущийОбработчик["error"];
		Иначе
			UUIDОбработчика = ТекущийОбработчик["key"];
		КонецЕсли;
		
		Результат = МодульПрокси.ОбновитьКлючОбработчика(СоединениеRW, UUIDОбработчика, UUID);
		
		Если Не Результат["result"] Тогда
			ВызватьИсключение Результат["error"];
		Иначе
			UUIDОбработчика = UUID;
		КонецЕсли;
		
		Для Каждого Аргумент Из Аргументы Цикл
			
			АргументИмя      = Аргумент["arg"];
			АргументЗначение = Аргумент["value"];
			АргументСтрогий  = Аргумент["strict"];
			
			Добавление = МодульПрокси.УстановитьАргументОбработчика(СоединениеRW, UUIDОбработчика, АргументИмя, АргументЗначение, АргументСтрогий);
			
			Если Не Добавление["result"] Тогда
				ВызватьИсключение Добавление["error"];
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = Новый Структура("result", Истина);
		Контекст.Ответ.КодСостояния = 200;
		
	Исключение
		МодульПрокси.УдалитьОбработчикЗапросов(СоединениеRW, UUIDОбработчика);
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция УдалитьОбработчикЗапросов(Контекст)
	
	Попытка
		Обработчик    = Контекст.Запрос.Форма["key"][0];
		СоединениеRW  = МенеджерСоединений.ПолучитьСоединениеRW();
		Результат     = МодульПрокси.УдалитьОбработчикЗапросов(СоединениеRW, Обработчик);
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ИзменитьОбработчик(Контекст)
	
	Результат       = Неопределено;
	UUIDОбработчика = Неопределено;
	
	Попытка
		
		СтруктураОбработчика = Toolbox.ПолучитьJSON(Контекст);
		UUID                 = СтруктураОбработчика["originalKey"];
		
		СоединениеRO      = МенеджерСоединений.ПолучитьСоединениеRO();
		СтарыйОбработчик  = МодульПрокси.ПолучитьОбработчикЗапросов(СоединениеRO, UUID);
		
		Если Не СтарыйОбработчик["result"] Тогда
			ВызватьИсключение СтарыйОбработчик["error"];
		Иначе
			
			СтарыйОбработчик = СтарыйОбработчик["data"];
			UUIDОбработчика  = СтарыйОбработчик["key"];
			
			СтарыйОбработчик.Вставить("originalKey", СтарыйОбработчик["key"]);
			
		КонецЕсли;
		
		ОбновитьДанныеОбработчика(UUIDОбработчика, СтруктураОбработчика);
		
		Результат = Новый Структура("result", Истина);
		Контекст.Ответ.КодСостояния = 200;
		
	Исключение
		ОбновитьДанныеОбработчика(UUIDОбработчика, СтарыйОбработчик);
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ВернутьСписокРасширений(Контекст)

	Попытка
		Результат = ПроцессорРасширений.ПолучитьСписокРасширений();
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

Функция ОбновитьКэшРасширений(Контекст)

	Попытка
		Результат = ПроцессорРасширений.ОбновитьСписокРасширений();
		ЗаполнитьСоставБиблиотек();
	Исключение
		Результат = Toolbox.ОшибкаОбработки(Контекст, 500, ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

Процедура ОбновитьДанныеОбработчика(UUIDОбработчика, СтруктураОбработчика)
	
	НовыйКлюч  = СтруктураОбработчика["key"];
	Аргументы  = СтруктураОбработчика["args"];
	Библиотека = СтруктураОбработчика["library"];
	МетодОПИ   = СтруктураОбработчика["function"];
	МетодHTTP  = СтруктураОбработчика["method"]; 
	
	СоединениеRW = МенеджерСоединений.ПолучитьСоединениеRW();
	
	Если НовыйКлюч <> UUIDОбработчика Тогда
		
		Результат = МодульПрокси.ОбновитьКлючОбработчика(СоединениеRW, UUIDОбработчика, НовыйКлюч);
		
		Если Не Результат["result"] Тогда
			ВызватьИсключение Результат["error"];
		Иначе
			UUIDОбработчика = НовыйКлюч;
		КонецЕсли;
		
	КонецЕсли;
	
	Очистка = МодульПрокси.ОчиститьАргументыОбработчика(СоединениеRW, UUIDОбработчика);
	
	Если Не Очистка["result"] Тогда
		ВызватьИсключение Очистка["error"];
	КонецЕсли;
	
	Для Каждого Аргумент Из Аргументы Цикл
		
		АргументИмя      = Аргумент["arg"];
		АргументЗначение = Аргумент["value"];
		АргументСтрогий  = Булево(Аргумент["strict"]);
		
		Добавление = МодульПрокси.УстановитьАргументОбработчика(СоединениеRW, UUIDОбработчика, АргументИмя, АргументЗначение, АргументСтрогий);
		
		Если Не Добавление["result"] Тогда
			ВызватьИсключение Добавление["error"];
		КонецЕсли;
		
	КонецЦикла;
	
	Обновление = МодульПрокси.ИзменитьОбработчикЗапросов(СоединениеRW
	, UUIDОбработчика
	, Библиотека
	, МетодОПИ
	, МетодHTTP);
	
	Если Не Обновление["result"] Тогда
		ВызватьИсключение Обновление["error"];
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСоставБиблиотек()
	
	СоответствиеКоманд = ОбъектОПИ.ПолучитьСоответствиеКомандМодулей();
	ТаблицаБиблиотек   = Новый ТаблицаЗначений();
	
	ТаблицаБиблиотек.Колонки.Добавить("Имя");
	ТаблицаБиблиотек.Колонки.Добавить("Заголовок");
	
	Для Каждого Команда Из СоответствиеКоманд Цикл
		
		ИмяКоманды = Команда.Ключ;
		
		Если ИмяКоманды = "tools" Тогда
			Продолжить;
		КонецЕсли;
		
		Модуль  = СтрЗаменить(Команда.Значение, "OPI_", "");
		Синоним = Синонимайзер(Модуль);
		
		НоваяСтрока = ТаблицаБиблиотек.Добавить();
		НоваяСтрока.Имя       = ИмяКоманды;
		НоваяСтрока.Заголовок = Синоним;
		
	КонецЦикла;
	
КонецПроцедуры

Функция Синонимайзер(ИмяРеквизита)
	
	Перем Синоним, Н, Символ, ПредСимвол, СледСимвол, Прописная, ПредПрописная, СледПрописная, ДлинаСтроки;
	
	Синоним     = ВРег(Сред(ИмяРеквизита, 1, 1));
	ДлинаСтроки = СтрДлина(ИмяРеквизита);
	
	Для Н = 2 По ДлинаСтроки Цикл
		
		Символ        = Сред(ИмяРеквизита, Н, 1);
		ПредСимвол    = Сред(ИмяРеквизита, Н - 1, 1);
		СледСимвол    = Сред(ИмяРеквизита, Н + 1, 1);
		
		Прописная     = Символ     = ВРег(Символ);
		ПредПрописная = ПредСимвол = ВРег(ПредСимвол);
		СледПрописная = СледСимвол = ВРег(СледСимвол);
		
		Если НЕ ПредПрописная И Прописная Тогда
			Синоним = Синоним + " " + Символ;
		ИначеЕсли Прописная И Не СледПрописная Тогда
			Синоним = Синоним + " " + Символ;
		Иначе
			Синоним = Синоним + Символ;
		Конецесли;
		
	КонецЦикла;
	
	МассивСлов = СтрРазделить(Синоним, " ");
	
	Для Н = 1 По МассивСлов.ВГраница() Цикл
		
		ТекущееСлово = МассивСлов[Н];
		
		Если СтрДлина(ТекущееСлово) = 1 Тогда
			МассивСлов[Н] = нРег(ТекущееСлово);
			Продолжить;
		Иначе
			
			ВторойСимвол = Сред(ТекущееСлово, 2, 1);
			
			Если ВторойСимвол = нРег(ВторойСимвол) Тогда
				МассивСлов[Н] = нРег(ТекущееСлово);
			Иначе
				МассивСлов[Н] = вРег(ТекущееСлово);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Синоним = СтрСоединить(МассивСлов, " ");
	
	ИзменитьРегистрНазваний(Синоним);
	
	Возврат Синоним;
	
КонецФункции

Процедура ИзменитьРегистрНазваний(Синоним)
	
	СоответствиеНазваний = Новый Соответствие();
	СоответствиеНазваний.Вставить("ozon", "Ozon");
	СоответствиеНазваний.Вставить("Bitrix 24", "Bitrix24");
	СоответствиеНазваний.Вставить("calendar", "Calendar");
	СоответствиеНазваний.Вставить("drive", "Drive");
	СоответствиеНазваний.Вставить("sheets", "Sheets");
	СоответствиеНазваний.Вставить("workspace", "Workspace");
	СоответствиеНазваний.Вставить("My SQL", "MySQL");
	СоответствиеНазваний.Вставить("Postgre SQL", "PostgreSQL");
	СоответствиеНазваний.Вставить("SQ lite", "SQLite");
	СоответствиеНазваний.Вставить("teams", "Teams");
	СоответствиеНазваний.Вставить("disk", "Disk");
	СоответствиеНазваний.Вставить("market", "Market");
	СоответствиеНазваний.Вставить("metrika", "Metrika");
	
	Для Каждого Название Из СоответствиеНазваний Цикл
		Синоним = СтрЗаменить(Синоним, Название.Ключ, Название.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСоветы()
	
	МассивСоветов = Новый Массив;
	МассивСоветов.Добавить("Обработчики - это основные объекты Melezh. Их можно добавлять и изменять на странице ""Обработчики""");
	МассивСоветов.Добавить("Каждый обработчик имеет уникальный ключ. Этот ключ означает путь, по которому обработчик принимает запросы (localhost/<ключ>)");
	МассивСоветов.Добавить("Обработчик может одновременно использовать только одну функцию ОПИ в качестве механизма обработки. Но ее можно изменить в любой момент");
	МассивСоветов.Добавить("Обработчики можно отключать без удаления при помощи тумблеров на странице ""Обработчики""");
	МассивСоветов.Добавить("Набор библиотек, функций и аргументов, доступных для обработчиков, равен таковому в любой другой реализации ОПИ");
	МассивСоветов.Добавить("Логи хранятся в виде json файлов. Для их разграничения используется особая структура подкатологов");
	МассивСоветов.Добавить("Найти и изменить текущий каталог сохранения логов можно в настройках");
	МассивСоветов.Добавить("Быстро найти логи по интересующему обработчику можно при помощи одной из кнопок действий на странице ""Обработчики""");
	МассивСоветов.Добавить("Пароль текущей консоли можно изменить только в консольном режиме при помощи команды ИзменитьПарольUI");
	МассивСоветов.Добавить("Файл проекта - это SQLite база, которую можно посмотреть в любом редакторе. Главное, ничего не сломать...");
	МассивСоветов.Добавить("Melezh написан на OneScript и использует сервер Kestrel, поддержка которого была добавлена в версии движка 2.0");
	МассивСоветов.Добавить("Ограничение по умолчанию для тела запроса, записываемого в лог - 100 МБ. Если запрос превышает это значение, то он записан не будет");
	МассивСоветов.Добавить("У каждого обработчика есть настраиваемые аргументы. Это значения, которые будут использованы по умолчанию, если не указаны в запросе");
	МассивСоветов.Добавить("Если указать для аргумента обработчика признак ""Строгий"", то его нельзя будет перезаписать данными из запроса");
	
КонецПроцедуры

#КонецОбласти