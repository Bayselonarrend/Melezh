name: Build and Push Docker Images (Manual)

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: 'Image version'
        required: true
      melezh_version:
        type: string
        description: 'Melezh version'
        required: true
      oint_version:
        type: string
        description: 'OInt version'
        required: true
      oint_build_id:
        type: string
        description: 'Jenkins OInt build ID'
        required: false
        default: lastSuccessfulBuild
      melezh_build_id:
        type: string
        description: 'Jenkins Melezh build ID'
        required: false
        default: lastSuccessfulBuild
      push_to_stable:
        type: boolean
        description: 'Push to stable repo (melezh) instead of dev (melezh-dev)'
        required: false
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Determine target repository
        id: repo
        run: |
          if ${{ github.event.inputs.push_to_stable }}; then
            echo "REPO=melezh" >> $GITHUB_OUTPUT
            echo "PUSH_LATEST=true" >> $GITHUB_OUTPUT
          else
            echo "REPO=melezh-dev" >> $GITHUB_OUTPUT
            echo "PUSH_LATEST=false" >> $GITHUB_OUTPUT
          fi

      - name: Create build directory
        run: |
          mkdir -p /tmp/melezh-build/{en,ru}

      - name: Download packages
        run: |
          # English packages (deb)
          wget -O /tmp/melezh-build/en/oint.deb \
               "https://api.athenaeum.digital/tc/job/Release/${{ github.event.inputs.oint_build_id }}/artifact/${{ github.event.inputs.oint_version }}/oint_${{ github.event.inputs.oint_version }}_all_en.deb"
          wget -O /tmp/melezh-build/en/melezh.deb \
               "https://api.athenaeum.digital/tc/job/Melezh_Release/${{ github.event.inputs.melezh_build_id }}/artifact/${{ github.event.inputs.melezh_version }}/melezh_${{ github.event.inputs.melezh_version }}_all_en.deb"

          # Russian packages (deb)
          wget --header="Authorization: Bearer ${{ secrets.TOKEN }}" \
               -O /tmp/melezh-build/ru/oint.deb \
               "https://api.athenaeum.digital/tc/job/Release/${{ github.event.inputs.oint_build_id }}/artifact/${{ github.event.inputs.oint_version }}/oint_${{ github.event.inputs.oint_version }}_all_ru.deb"
          wget -O /tmp/melezh-build/ru/melezh.deb \
               "https://api.athenaeum.digital/tc/job/Melezh_Release/${{ github.event.inputs.melezh_build_id }}/artifact/${{ github.event.inputs.melezh_version }}/melezh_${{ github.event.inputs.melezh_version }}_all_ru.deb"

          # English packages (rpm)
          wget -O /tmp/melezh-build/en/oint.rpm \
               "https://api.athenaeum.digital/tc/job/Release/${{ github.event.inputs.oint_build_id }}/artifact/${{ github.event.inputs.oint_version }}/oint-${{ github.event.inputs.oint_version }}-1.noarch_en.rpm"
          wget -O /tmp/melezh-build/en/melezh.rpm \
               "https://api.athenaeum.digital/tc/job/Melezh_Release/${{ github.event.inputs.melezh_build_id }}/artifact/${{ github.event.inputs.melezh_version }}/melezh-${{ github.event.inputs.melezh_version }}-1.noarch_en.rpm"

          # Russian packages (rpm)
          wget --header="Authorization: Bearer ${{ secrets.TOKEN }}" \
               -O /tmp/melezh-build/ru/oint.rpm \
               "https://api.athenaeum.digital/tc/job/Release/${{ github.event.inputs.oint_build_id }}/artifact/${{ github.event.inputs.oint_version }}/oint-${{ github.event.inputs.oint_version }}-1.noarch_ru.rpm"
          wget -O /tmp/melezh-build/ru/melezh.rpm \
               "https://api.athenaeum.digital/tc/job/Melezh_Release/${{ github.event.inputs.melezh_build_id }}/artifact/${{ github.event.inputs.melezh_version }}/melezh-${{ github.event.inputs.melezh_version }}-1.noarch_ru.rpm"

      - name: Log in to GHCR
        run: echo "${{ secrets.TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push English DEB image
        run: |
          cd ./service/docker/ghcr/en-deb
          cp /tmp/melezh-build/en/oint.deb .
          cp /tmp/melezh-build/en/melezh.deb .
          
          # Build with version tag
          docker build -t ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:${{ github.event.inputs.version }}-deb-en .
          docker push ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:${{ github.event.inputs.version }}-deb-en
          
          # Additional push as latest if stable
          if ${{ steps.repo.outputs.PUSH_LATEST }}; then
            docker tag ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:${{ github.event.inputs.version }}-deb-en \
                      ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:latest-deb-en
            docker push ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:latest-deb-en
          fi

      - name: Build and Push Russian DEB image
        run: |
          cd ./service/docker/ghcr/ru-deb
          cp /tmp/melezh-build/ru/oint.deb .
          cp /tmp/melezh-build/ru/melezh.deb .
          
          docker build -t ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:${{ github.event.inputs.version }}-deb-ru .
          docker push ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:${{ github.event.inputs.version }}-deb-ru
          
          if ${{ steps.repo.outputs.PUSH_LATEST }}; then
            docker tag ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:${{ github.event.inputs.version }}-deb-ru \
                      ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:latest-deb-ru
            docker push ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:latest-deb-ru
          fi

      - name: Build and Push English RPM image
        run: |
          cd ./service/docker/ghcr/en-rpm
          cp /tmp/melezh-build/en/oint.rpm .
          cp /tmp/melezh-build/en/melezh.rpm .
          
          docker build -t ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:${{ github.event.inputs.version }}-rpm-en .
          docker push ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:${{ github.event.inputs.version }}-rpm-en
          
          if ${{ steps.repo.outputs.PUSH_LATEST }}; then
            docker tag ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:${{ github.event.inputs.version }}-rpm-en \
                      ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:latest-rpm-en
            docker push ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:latest-rpm-en
          fi

      - name: Build and Push Russian RPM image
        run: |
          cd ./service/docker/ghcr/ru-rpm
          cp /tmp/melezh-build/ru/oint.rpm .
          cp /tmp/melezh-build/ru/melezh.rpm .
          
          docker build -t ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:${{ github.event.inputs.version }}-rpm-ru .
          docker push ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:${{ github.event.inputs.version }}-rpm-ru
          
          if ${{ steps.repo.outputs.PUSH_LATEST }}; then
            docker tag ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:${{ github.event.inputs.version }}-rpm-ru \
                      ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:latest-rpm-ru
            docker push ghcr.io/bayselonarrend/${{ steps.repo.outputs.REPO }}:latest-rpm-ru
          fi