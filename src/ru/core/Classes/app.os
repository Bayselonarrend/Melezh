#Использовать oint
#Использовать oint-cli
#Использовать "../../tools"
#Использовать "../../help"
#Использовать "../../data"

Перем Версия;            // Версия программы
Перем Отладка;           // Флаг вывода отладочной информации

Перем Парсер;            // Объект парсера входящих данных 

Перем ФайлВывода;        // Путь перенаправления вывода в файл
Перем ТаблицаМетодов;    // Таблица параметров текущей библиотеки
Перем Модуль;
Перем ТекущийМетод;

#Область СлужебныеПроцедурыИФункции

#Область Основные

Процедура ОсновнойОбработчик()
	
	Отладка        = Истина;
	Тестирование   = Ложь;

	Парсер         = Новый("CommandLineArgumentParser");
	Версия         = AddonContent.ПолучитьВерсию();
	ТаблицаМетодов = AddonContent.ПолучитьСостав();
	Модуль         = "ПроксиИнтеграций";
	
	ОпределитьТекущийМетод();
	СформироватьВвод();

	Результат = Парсер.Разобрать(АргументыКоманднойСтроки);
	ВыполнитьОбработкуКоманды(Результат);

КонецПроцедуры

Процедура ОпределитьТекущийМетод()

	Если АргументыКоманднойСтроки.Количество() > 0 Тогда
		ТекущийМетод = АргументыКоманднойСтроки[0];
	Иначе
		ТекущийМетод = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьВвод()

	Парсер.ДобавитьПараметр("Метод");
	ДобавитьПараметрыМетода();
	
	Парсер.ДобавитьПараметрФлаг("--help");
	Парсер.ДобавитьПараметрФлаг("--debug");

	Парсер.ДобавитьИменованныйПараметр("--out");

КонецПроцедуры

Процедура ДобавитьПараметрыМетода();
	
	СписокПараметров = ТаблицаМетодов.НайтиСтроки(Новый Структура("МетодПоиска", вРег(ТекущийМетод)));

	Для Каждого Параметр Из СписокПараметров Цикл
		Парсер.ДобавитьИменованныйПараметр(Параметр.Параметр);
	КонецЦикла;
	
КонецПроцедуры


Процедура ВыполнитьОбработкуКоманды(Знач Параметры)
	
	Вывод = "";

	УстановитьРежимОтладки(Параметры);
	УстановитьФайлВывода(Параметры);
	ВывестиДопИнформацию(Параметры);

	Попытка
			
		Вывод = ПолучитьРезультатОбработки(Параметры);

		ОбработатьВыводJSON(Вывод);
		СообщитьРезультат(Вывод, СтатусСообщения.Внимание);

	Исключение
		ОбработатьОшибочныйВывод(Вывод, ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьРезультатОбработки(Знач Параметры)

	Метод      = Параметры["Метод"];
	ЭтоСправка = Параметры["--help"];
	Ответ      = "Функция вернула пустое значение";

	ЧислоСтандартныхПараметров = 3;

	Если Не ЗначениеЗаполнено(Метод) Тогда

		Если ЭтоСправка Тогда
			Help.ВывестиСправкуПоМетодам(ТаблицаМетодов);
		Иначе
			Help.ВывестиНачальнуюСтраницу(Версия);
		КонецЕсли;

	Иначе

		ОтборКоманды      = Новый Структура("МетодПоиска", вРег(Метод));
		ПараметрыМетода   = ТаблицаМетодов.НайтиСтроки(ОтборКоманды);
	
		Если Не ЗначениеЗаполнено(ПараметрыМетода) Тогда
			Help.ВывестиСообщениеИсключения("Метод", ФайлВывода);
		КонецЕсли;
	
		Если Параметры.Количество() = ЧислоСтандартныхПараметров Или Параметры["--help"] Тогда
			Help.ВывестиСправкуПоПараметрам(ПараметрыМетода);
		КонецЕсли;
	
		ТекстВыполнения = СформироватьСтрокуВызоваМетода(Параметры, ПараметрыМетода, Модуль, Метод);
	
		Если Отладка Тогда
			Сообщить(ТекстВыполнения, СтатусСообщения.Внимание);
		КонецЕсли;

		Выполнить(ТекстВыполнения);

		Возврат Ответ;

	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Вспомогательные

Процедура ОбработатьВыводJSON(Вывод)
	
	Если ПустойВывод(Вывод) Тогда
		Вывод = Новый Структура;
	КонецЕсли;

	Если ТипЗнч(Вывод) = Тип("Структура")
		Или ТипЗнч(Вывод) = Тип("Соответствие")
		Или ТипЗнч(Вывод) = Тип("Массив") Тогда
	
		Вывод = OPI_Инструменты.JSONСтрокой(Вывод, , , Ложь);

	КонецЕсли;

КонецПроцедуры

Функция СформироватьСтрокуВызоваМетода(Знач ПереданныеПараметры, Знач ПараметрыМетода, Знач Модуль, Знач Метод)

	ТекстВыполнения = "";
	СтрокаВызова    = Модуль + "." + Метод + "(";
	Счетчик         = 0;

	Для Каждого НеобходимыйПараметр Из ПараметрыМетода Цикл

		ИмяПараметра      = НеобходимыйПараметр.Параметр;
		ЗначениеПараметра = ПереданныеПараметры.Получить(ИмяПараметра);

		Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда

			ИмяПараметра = "Параметр" + СтрЗаменить(ИмяПараметра, "--", "_");

			ТекстВыполнения = ТекстВыполнения 
				+ Символы.ПС 
				+ ИмяПараметра
				+ " = """ 
				+ СтрЗаменить(ЗначениеПараметра, """", """""")
				+ """;";

			Если ТребуетсяОбработкаУправляющихПоследовательностей(ИмяПараметра, ЗначениеПараметра) Тогда

				ТекстВыполнения = ТекстВыполнения + "
				|OPI_Инструменты.ЗаменитьУправляющиеПоследовательности(" + ИмяПараметра + ");
				|";

			КонецЕсли;

			СтрокаВызова = СтрокаВызова + ИмяПараметра + ", ";
			Счетчик      = Счетчик + 1;

		Иначе
			СтрокаВызова = СтрокаВызова + " , ";
		КонецЕсли;

	КонецЦикла;

	ЛишниеСимволы   = 2;
	СтрокаВызова    = Лев(СтрокаВызова, СтрДлина(СтрокаВызова) - ЛишниеСимволы);
	СтрокаВызова    = СтрокаВызова + ");";
	СтрокаВызова    = "Ответ = " + СтрокаВызова;
	ТекстВыполнения = ТекстВыполнения + Символы.ПС + СтрокаВызова;

	Возврат ТекстВыполнения;

КонецФункции

Процедура УстановитьРежимОтладки(Знач Параметры)

	Если Параметры["--debug"] Тогда
		Отладка = Истина;
	Иначе
		Отладка = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьФайлВывода(Знач Параметры)

	Вывод = Параметры["--out"];

	Если ЗначениеЗаполнено(Вывод) Тогда
		ФайлВывода = Вывод;
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиДопИнформацию(Параметры)

	Если Отладка Тогда

		Для каждого ВводныйПараметр Из Параметры Цикл
			Сообщить(ВводныйПараметр.Ключ + " : " + ВводныйПараметр.Значение);	
		КонецЦикла;

    КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОшибочныйВывод(Вывод, ИнформацияОбОшибке)

	Информация = "";
	Если ЗначениеЗаполнено(Вывод) Тогда

		Если Отладка Тогда
			Информация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;

		СообщитьРезультат(Вывод);
	Иначе

		Если Отладка Тогда
			Информация = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Иначе
			Информация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
	
	КонецЕсли;
	
	Help.ВывестиСообщениеИсключения(Информация, ФайлВывода);
	
КонецПроцедуры

Процедура СообщитьРезультат(Знач Текст, Знач Статус = "")

	Если Не ЗначениеЗаполнено(Статус) Тогда
		Статус = СтатусСообщения.БезСтатуса;
	КонецЕсли;

	Если ЗначениеЗаполнено(ФайлВывода) Тогда
		Текст = ЗаписатьЗначениеВФайл(Текст, ФайлВывода);
	ИначеЕсли ТипЗнч(Текст) = Тип("ДвоичныеДанные") Тогда
		Текст = "Похоже, что в ответе пришли двоичные данные! "
		    + "В следующий раз используйте опцию --out для указания пути их сохранения";
		Статус = СтатусСообщения.Информация;
	Иначе 
		Текст = Строка(Текст);
	КонецЕсли;

    Сообщить(Текст, Статус);
	
КонецПроцедуры

Функция ЗаписатьЗначениеВФайл(Знач Значение, Знач Путь)
	
	СтандартнаяЕдиница = 1024;
	ЕдиницаДанных      = СтандартнаяЕдиница * СтандартнаяЕдиница;
	Значение           = ?(ТипЗнч(Значение) = Тип("ДвоичныеДанные"), Значение, Строка(Значение));

	Если ТипЗнч(Значение) = Тип("Строка") Тогда 

		ВозможныйФайл = Новый Файл(Значение);

		Если ВозможныйФайл.Существует() Тогда
			Путь = Значение;
		Иначе
			Значение = ПолучитьДвоичныеДанныеИзСтроки(Значение);
	    КонецЕсли;

	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
        Значение.Записать(Путь);
	КонецЕсли;

	ЗаписанныйФайл = Новый Файл(Путь);

	Если ЗаписанныйФайл.Существует() Тогда
		Возврат "Файл размером " 
		    + Строка(Окр(ЗаписанныйФайл.Размер() / ЕдиницаДанных, 3)) 
			+ " МБ был записан в " 
			+ ЗаписанныйФайл.ПолноеИмя;
	Иначе
		ВызватьИсключение "Файл не был записан! Используйте флаг --debug для получения дополнительной информации";
	КонецЕсли;

КонецФункции

Функция ПустойВывод(Вывод)

	Если ТипЗнч(Вывод) = Тип("ДвоичныеДанные") Тогда
		Возврат Вывод.Размер() = 0;
	Иначе
		Возврат Не ЗначениеЗаполнено(Вывод);
	КонецЕсли;
	
КонецФункции

Функция ТребуетсяОбработкаУправляющихПоследовательностей(Знач ИмяПараметра, Знач ЗначениеПараметра)

	ФайлПараметра         = Новый Файл(ЗначениеПараметра);
	ЗначениеПараметраСокр = СокрЛП(ЗначениеПараметра);

	Возврат Не СтрНачинаетсяС(ЗначениеПараметраСокр, "{")
				И Не СтрНачинаетсяС(ЗначениеПараметраСокр, "[") 
				И Не ФайлПараметра.Существует() 
				И Не ИмяПараметра = "Параметр_out";

КонецФункции

#КонецОбласти

#КонецОбласти

Попытка
	ОсновнойОбработчик();	
Исключение
	
	Если Отладка Тогда
		Информация = ОписаниеОшибки();
	Иначе
		Информация = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецЕсли;

	Help.ВывестиСообщениеИсключения(Информация, ФайлВывода);

КонецПопытки;