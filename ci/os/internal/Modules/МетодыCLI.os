#Использовать osparser

Перем ФайлСостава;
Перем МодульСостава;
Перем ТаблицаОписанийПараметров;

Процедура СформироватьCLI() Экспорт
      
    МодульСостава       = Новый ТекстовыйДокумент();
    ФайлСостава         = "./src/ru/data/Modules/AddonContent.os";
    
	ЗаписатьФункциюОпределенияВерсии();
    РазобратьМодуль(Новый Файл("./src/ru/tools/Modules/IntegrationProxy.os"));

КонецПроцедуры

Процедура ЗаписатьФункциюОпределенияВерсии()
    
    Версия = ПолучитьВерсиюПакета();
    МодульСостава.ДобавитьСтроку("Функция ПолучитьВерсию() Экспорт");
    МодульСостава.ДобавитьСтроку("  Возврат """ + Версия + """;");
    МодульСостава.ДобавитьСтроку("КонецФункции");
    МодульСостава.ДобавитьСтроку("");
    
КонецПроцедуры

Процедура РазобратьМодуль(Модуль)
    
    ЗаписатьНачалоСоставаБиблиотеки();
    
    Парсер         = Новый ПарсерВстроенногоЯзыка;
    ДокументМодуля = Новый ТекстовыйДокумент;
    ДокументМодуля.Прочитать(Модуль.ПолноеИмя, "UTF-8");

    ТекстМодуля = ДокументМодуля.ПолучитьТекст();
	ТекстМодуля = СтрЗаменить(ТекстМодуля, "#Использовать oint-cli", "//#Использовать oint-cli");
    
    СтруктураМодуля = Парсер.Разобрать(ТекстМодуля);
    ТекущаяОбласть  = "Основные методы";
    Для Каждого Метод Из СтруктураМодуля.Объявления Цикл
        
        Если Метод.Тип = "ИнструкцияПрепроцессораОбласть" Тогда
            ТекущаяОбласть = Синонимайзер(Метод.Имя);
        КонецЕсли;
        
        Если Метод.Тип = "ОбъявлениеМетода" И Метод.Сигнатура.Экспорт = Истина Тогда
            ТаблицаОписанийПараметров.Очистить();
            РазобратьКомментарийМетода(ДокументМодуля, Метод, Модуль, ТекущаяОбласть);	
            
        КонецЕсли;
        
    КонецЦикла;
    
    ЗаписатьОкончаниеСоставаБиблиотеки();
    
КонецПроцедуры

Процедура ЗаписатьНачалоСоставаБиблиотеки()
    
    МодульСостава.ДобавитьСтроку("Функция ПолучитьСостав() Экспорт
    |
    |    ТаблицаСостава = Новый ТаблицаЗначений();
    |    ТаблицаСостава.Колонки.Добавить(""Метод"");
    |    ТаблицаСостава.Колонки.Добавить(""МетодПоиска"");
    |    ТаблицаСостава.Колонки.Добавить(""Параметр"");
    |    ТаблицаСостава.Колонки.Добавить(""Описание"");
    |    ТаблицаСостава.Колонки.Добавить(""ОписаниеМетода"");
    |    ТаблицаСостава.Колонки.Добавить(""Область"");
    |");
    
    ТаблицаОписанийПараметров = Новый ТаблицаЗначений;
    ТаблицаОписанийПараметров.Колонки.Добавить("Имя");
    ТаблицаОписанийПараметров.Колонки.Добавить("Типы");
    ТаблицаОписанийПараметров.Колонки.Добавить("Описание");
    ТаблицаОписанийПараметров.Колонки.Добавить("ЗначениеПоУмолчанию");
    
КонецПроцедуры

Процедура ЗаписатьОкончаниеСоставаБиблиотеки()
    
    МодульСостава.ДобавитьСтроку("    Возврат ТаблицаСостава;");
    МодульСостава.ДобавитьСтроку("КонецФункции");
    МодульСостава.ДобавитьСтроку(Символы.ПС);
    
    МодульСостава.Записать(ФайлСостава);
    
КонецПроцедуры

Процедура РазобратьКомментарийМетода(ТекстовыйДокумент, Метод, Модуль, Область)
    
    НомерСтроки         = Метод.Начало.НомерСтроки;
    ИмяМетода           = Метод.Сигнатура.Имя;
    
    МассивКомментария = ПарсингКомментария(ТекстовыйДокумент, НомерСтроки);
    
    Если МассивКомментария.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;
    
    МассивПараметров  = Новый Массив;
    ОписаниеМетода    = "";
    
    СформироватьСтруктуруМетода(МассивКомментария, МассивПараметров, ОписаниеМетода);
    СформироватьТаблицуОписанийПараметров(МассивПараметров, Метод, Модуль);
    
    ОписаниеМетода = СокрЛП(ОписаниеМетода);
    
    Для Каждого СтрокаПараметра Из ТаблицаОписанийПараметров Цикл
        
        ЗаписатьСозданиеПараметраСостава(СтрокаПараметра, ИмяМетода, Область, СокрЛП(ОписаниеМетода));
        ОписаниеМетода = "";
        
    КонецЦикла;
    
КонецПроцедуры

Функция ПарсингКомментария(Знач ТекстовыйДокумент, Знач НомерСтроки)
    
    ТекущаяСтрока       = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки - 1);
    ТекстКомментария    = ТекущаяСтрока;
    
    Счетчик	= 1;
    Пока СтрНайти(ТекущаяСтрока, "//") > 0 Цикл
        
        Счетчик = Счетчик + 1;
        
        ТекущаяСтрока    = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки - Счетчик);
        ТекстКомментария = ТекущаяСтрока + Символы.ПС + ТекстКомментария;
        
    КонецЦикла;
    
    Если СтрНайти(ТекстКомментария, "!NOCLI") > 0 Тогда
        Возврат Новый Массив;
    КонецЕсли;
    
    МассивКомментария = СтрРазделить(ТекстКомментария, "//", Ложь);
    
    Если МассивКомментария.Количество() = 0 Тогда
        Сообщить(ТекстКомментария);
        Возврат Новый Массив;
    Иначе
        МассивКомментария.Удалить(0);
    КонецЕсли;
    
    Возврат МассивКомментария;
    
КонецФункции

Процедура СформироватьСтруктуруМетода(Знач МассивКомментария, МассивПараметров, ОписаниеМетода)
    
    ЗаписыватьПараметры = Ложь;
    ЗаписыватьОписание  = Истина;
    
    Счетчик = 0;
    Для Каждого СтрокаКомментария Из МассивКомментария Цикл
        
        Счетчик = Счетчик + 1;
        
        Если Не ЗначениеЗаполнено(СокрЛП(СтрокаКомментария)) Тогда
            ЗаписыватьОписание = Ложь;
        КонецЕсли;
        
        Если ЗаписыватьОписание = Истина И Счетчик > 1 Тогда
            ОписаниеМетода = ?(ЗначениеЗаполнено(ОписаниеМетода), ОписаниеМетода + "    |   ", ОписаниеМетода) 
            + СтрокаКомментария;
        КонецЕсли;
        
        Если СтрНайти(СтрокаКомментария, "Параметры:") > 0 Или СтрНайти(СтрокаКомментария, "Parameters:") > 0 Тогда
            ЗаписыватьПараметры = Истина;
            ЗаписыватьОписание  = Ложь;
            
        ИначеЕсли СтрНайти(СтрокаКомментария, "Возвращаемое значение:") > 0 Или СтрНайти(СтрокаКомментария, "Returns:") > 0 Тогда
            Прервать;
            
        ИначеЕсли ЗаписыватьПараметры = Истина 
            И ЗначениеЗаполнено(СокрЛП(СтрокаКомментария)) 
            И Не СтрНачинаетсяС(СокрЛП(СтрокаКомментария), "*") Тогда
            
            МассивПараметров.Добавить(СтрокаКомментария);
            
        Иначе
            Продолжить;
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура СформироватьТаблицуОписанийПараметров(Знач МассивПараметров, Знач Метод, Знач Модуль = "")
    
    Разделитель = "-";
    
    Для Каждого ПараметрМетода Из МассивПараметров Цикл
        
        МассивЭлементовПараметра = СтрРазделить(ПараметрМетода, Разделитель, Ложь);
        КоличествоЭлементов      = МассивЭлементовПараметра.Количество();
        
        Для Н = 0 По МассивЭлементовПараметра.ВГраница() Цикл
            МассивЭлементовПараметра[Н] = СокрЛП(МассивЭлементовПараметра[Н]);
        КонецЦикла;
        
        Если КоличествоЭлементов < 4 Тогда
            Сообщить("Недостаточный набор данных в док. комментарии: " + Модуль.ИмяБезРасширения + " - " + Метод.Сигнатура.Имя);
            Возврат;
        КонецЕсли;
        
        
        Имя1С     = МассивЭлементовПараметра[0];
        Имя       = "--" + МассивЭлементовПараметра[3];
        Типы      = МассивЭлементовПараметра[1];
        Описание  = ?(КоличествоЭлементов >= 5, МассивЭлементовПараметра[4], МассивЭлементовПараметра[2]);
        
        Если КоличествоЭлементов > 5 Или СтрНайти(Имя, " ") > 0 Тогда
            ВызватьИсключение("Некоррентный документирующий комментарий в методе: " + Модуль.ИмяБезРасширения + " - " + Метод.Сигнатура.Имя);
        КонецЕсли;
        
        НоваяСтрокаТаблицы = ТаблицаОписанийПараметров.Добавить();
        НоваяСтрокаТаблицы.Имя      = Имя;
        НоваяСтрокаТаблицы.Типы     = Типы;
        НоваяСтрокаТаблицы.Описание = Описание;
        
        НоваяСтрокаТаблицы.ЗначениеПоУмолчанию = ПолучитьЗначениеПараметраПоУмолчанию(Имя1С, Метод);
    КонецЦикла;
    
КонецПроцедуры

Функция ПолучитьЗначениеПараметраПоУмолчанию(Знач Имя, Знач Метод)
    
    Значение = "";
    
    Для Каждого ПараметрМетода Из Метод.Сигнатура.Параметры Цикл
        
        Если ПараметрМетода.Имя = Имя Тогда
            
            ЗначениеПараметра = ПараметрМетода.Значение;
            Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
                Попытка
                    Значение = ЗначениеПараметра["Элементы"][0]["Значение"];
                Исключение 
                    Значение = ЗначениеПараметра.Значение;
                КонецПопытки;
                Значение = ?(ЗначениеЗаполнено(Значение), Значение, "Пустое значение");
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат Значение;
    
КонецФункции

Процедура ЗаписатьСозданиеПараметраСостава(СтрокаПараметра, ИмяМетода, Область, ОписаниеМетода = "") 
    
    Имя        = СтрокаПараметра["Имя"];
    Описание   = СтрокаПараметра["Описание"];
    Значение   = СтрокаПараметра["ЗначениеПоУмолчанию"];
    
    Если ЗначениеЗаполнено(Значение) Тогда
        Описание = Описание + " (необяз. по ум. - " + Значение + ")";
    КонецЕсли;
    
    МодульСостава.ДобавитьСтроку(Символы.ПС);
    
    МодульСостава.ДобавитьСтроку("    НоваяСтрока = ТаблицаСостава.Добавить();");
    МодульСостава.ДобавитьСтроку("    НоваяСтрока.Метод       = """ + ИмяМетода + """;");
    МодульСостава.ДобавитьСтроку("    НоваяСтрока.МетодПоиска = """ + вРег(ИмяМетода) + """;");
    МодульСостава.ДобавитьСтроку("    НоваяСтрока.Параметр    = """ + Имя + """;");
    МодульСостава.ДобавитьСтроку("    НоваяСтрока.Описание    = """ + Описание + """;");
    МодульСостава.ДобавитьСтроку("    НоваяСтрока.Область     = """ + Область + """;");
    
    Если ЗначениеЗаполнено(ОписаниеМетода) Тогда
        МодульСостава.ДобавитьСтроку("    НоваяСтрока.ОписаниеМетода   = """ + ОписаниеМетода + """;");
    КонецЕсли;
    
    МодульСостава.ДобавитьСтроку(Символы.ПС);
    
КонецПроцедуры

Функция ПолучитьВерсиюПакета()
    
    Версия     = "";
    Packagedef = "./src/ru/packagedef";
    Признак    = ".Версия(""";
    
    ТекстФайла = Новый ТекстовыйДокумент();
    ТекстФайла.Прочитать(Packagedef);
    
    Для Н = 1 По ТекстФайла.КоличествоСтрок() Цикл
        
        ТекущаяСтрока = СокрЛП(ТекстФайла.ПолучитьСтроку(Н));
        Если СтрНайти(ТекущаяСтрока, Признак) Тогда
            Версия = СтрЗаменить(ТекущаяСтрока, Признак, "");
            Версия = Лев(Версия, СтрДлина(Версия) - 2);
            Прервать;
        КонецЕсли;    
    КонецЦикла;
    
    Возврат Версия;
    
КонецФункции

Функция Синонимайзер(ИмяРеквизита)
    
    Перем Синоним, ъ, Символ, ПредСимвол, СледСимвол, Прописная, ПредПрописная, СледПрописная, ДлинаСтроки;
    
    Синоним = ВРег(Сред(ИмяРеквизита, 1, 1));
    ДлинаСтроки = СтрДлина(ИмяРеквизита);
    Для ъ=2 По ДлинаСтроки Цикл
        Символ = Сред(ИмяРеквизита, ъ, 1);
        ПредСимвол = Сред(ИмяРеквизита, ъ-1, 1);
        СледСимвол = Сред(ИмяРеквизита, ъ+1, 1);
        Прописная = Символ = ВРег(Символ);
        ПредПрописная = ПредСимвол = ВРег(ПредСимвол);
        СледПрописная = СледСимвол = ВРег(СледСимвол);
        
        // Варианты:
        Если НЕ ПредПрописная И Прописная Тогда
            Синоним = Синоним + " " + Символ;
        ИначеЕсли Прописная И НЕ СледПрописная Тогда
            Синоним = Синоним + " " + Символ;
        Иначе
            Синоним = Синоним + Символ;
        Конецесли;
    КонецЦикла;
    
    Синоним = ВРег(Лев(Синоним,1)) + нРег(Сред(Синоним,2));
    
    Возврат Синоним;
    
КонецФункции

Процедура СкопироватьФайлы(Знач КаталогИсточник, Знач КаталогПриемник)
    
    СоздатьКаталог(КаталогПриемник);
    
    МассивФайлов = НайтиФайлы(КаталогИсточник, "*.*", Истина);
    
    Для Каждого Файл Из МассивФайлов Цикл
        
        ПолноеИмяИсточник = Файл.ПолноеИмя;
        ПолноеИмяПриемник = КаталогПриемник + СтрЗаменить(Файл.ПолноеИмя, КаталогИсточник, "");
        
        Если Файл.ЭтоКаталог() Тогда
            СоздатьКаталог(ПолноеИмяПриемник);	
        Иначе
            КопироватьФайл(ПолноеИмяИсточник, ПолноеИмяПриемник);
        КонецЕсли;
    КонецЦикла;	
    
КонецПроцедуры
