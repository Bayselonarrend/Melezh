Процедура ДополнитьСоставРасширениями(ОбъектОПИ, КаталогРасширений) Экспорт

    ФайлыРасширений = НайтиФайлы(КаталогРасширений, "*.os");

    Для Каждого ФайлРасишрения Из ФайлыРасширений Цикл

        Попытка
            ТаблицаПараметров = РазобратьМодуль(ФайлРасишрения);
            ОбъектОПИ.ДополнитьКэшСостава(ФайлРасишрения.ИмяБезРасширения, ТаблицаПараметров);
        Исключение
            Сообщить(СтрШаблон("Ошибка применения расширения %1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
        КонецПопытки;

    КонецЦикла;

КонецПроцедуры

Функция РазобратьМодуль(Модуль)
    
    ТаблицаСостава = Новый ТаблицаЗначений();
    ТаблицаСостава.Колонки.Добавить("Библиотека");
    ТаблицаСостава.Колонки.Добавить("Модуль");
    ТаблицаСостава.Колонки.Добавить("Метод");
    ТаблицаСостава.Колонки.Добавить("МетодПоиска");
    ТаблицаСостава.Колонки.Добавить("Параметр");
    ТаблицаСостава.Колонки.Добавить("Описание");
    ТаблицаСостава.Колонки.Добавить("ОписаниеМетода");
    ТаблицаСостава.Колонки.Добавить("Область");
    
    Парсер         = Новый("EmbeddedLanguageParser");
    ДокументМодуля = Новый ТекстовыйДокумент;
    ДокументМодуля.Прочитать(Модуль.ПолноеИмя, "UTF-8");

    ТекстМодуля     = ДокументМодуля.ПолучитьТекст();
    СтруктураМодуля = Парсер.Parse(ТекстМодуля);
    ТекущаяОбласть  = "Основные методы";

    Для Каждого Метод Из СтруктураМодуля.Declarations Цикл
  
        Если Метод.Type = "InstructionPreprocessorRegion" Тогда
            ТекущаяОбласть = Синонимайзер(Метод.Name);
        КонецЕсли;
        
        Если Метод.Type = "MethodDeclaration" И Метод.Signature.Export = Истина Тогда
            РазобратьКомментарийМетода(ДокументМодуля, Метод, Модуль, ТекущаяОбласть, ТаблицаСостава);	       
        КонецЕсли;
        
    КонецЦикла;

    Возврат ТаблицаСостава;

КонецФункции

Процедура РазобратьКомментарийМетода(ТекстовыйДокумент, Метод, Модуль, Область, ТаблицаСостава)
    
    НомерСтроки         = Метод.Start.LineNumber;
    ИмяМетода           = Метод.Signature.Name;
    
    МассивКомментария = ПарсингКомментария(ТекстовыйДокумент, НомерСтроки);
    
    Если МассивКомментария.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;
    
    МассивПараметров  = Новый Массив;
    ОписаниеМетода    = "";
    
    СформироватьСтруктуруМетода(МассивКомментария, МассивПараметров, ОписаниеМетода);
    СформироватьТаблицуОписанийПараметров(МассивПараметров, Метод, ТаблицаСостава, Модуль, ОписаниеМетода, Область);
    
КонецПроцедуры

Функция ПарсингКомментария(Знач ТекстовыйДокумент, Знач НомерСтроки)
    
    ТекущаяСтрока       = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки - 1);
    ТекстКомментария    = ТекущаяСтрока;
    
    Счетчик	= 1;
    Пока СтрНайти(ТекущаяСтрока, "//") > 0 Цикл
        
        Счетчик = Счетчик + 1;
        
        ТекущаяСтрока    = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки - Счетчик);
        ТекстКомментария = ТекущаяСтрока + Символы.ПС + ТекстКомментария;
        
    КонецЦикла;
    
    Если СтрНайти(ТекстКомментария, "!NOCLI") > 0 Тогда
        Возврат Новый Массив;
    КонецЕсли;
    
    МассивКомментария = СтрРазделить(ТекстКомментария, "//", Ложь);
    
    Если МассивКомментария.Количество() = 0 Тогда
        Сообщить(ТекстКомментария);
        Возврат Новый Массив;
    Иначе
        МассивКомментария.Удалить(0);
    КонецЕсли;
    
    Возврат МассивКомментария;
    
КонецФункции

Процедура СформироватьСтруктуруМетода(Знач МассивКомментария, МассивПараметров, ОписаниеМетода)
    
    ЗаписыватьПараметры = Ложь;
    ЗаписыватьОписание  = Истина;
    
    Счетчик = 0;
    Для Каждого СтрокаКомментария Из МассивКомментария Цикл
        
        Счетчик = Счетчик + 1;
        
        Если Не ЗначениеЗаполнено(СокрЛП(СтрокаКомментария)) Тогда
            ЗаписыватьОписание = Ложь;
        КонецЕсли;
        
        Если ЗаписыватьОписание = Истина И Счетчик > 1 Тогда
            ОписаниеМетода = ОписаниеМетода + СтрокаКомментария;
        КонецЕсли;
        
        Если СтрНайти(СтрокаКомментария, "Параметры:") > 0 Или СтрНайти(СтрокаКомментария, "Parameters:") > 0 Тогда
            ЗаписыватьПараметры = Истина;
            ЗаписыватьОписание  = Ложь;
            
        ИначеЕсли СтрНайти(СтрокаКомментария, "Возвращаемое значение:") > 0 Или СтрНайти(СтрокаКомментария, "Returns:") > 0 Тогда
            Прервать;
            
        ИначеЕсли ЗаписыватьПараметры = Истина 
            И ЗначениеЗаполнено(СокрЛП(СтрокаКомментария)) 
            И Не СтрНачинаетсяС(СокрЛП(СтрокаКомментария), "*") Тогда
            
            МассивПараметров.Добавить(СтрокаКомментария);
            
        Иначе
            Продолжить;
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура СформироватьТаблицуОписанийПараметров(Знач МассивПараметров, Знач Метод, ТаблицаСостава, Модуль, ОписаниеМетода, Область)
    
    Разделитель   = "-";
    МассивТекущих = Новый Массив;
    
    Для Каждого ПараметрМетода Из МассивПараметров Цикл
        
        МассивЭлементовПараметра = СтрРазделить(ПараметрМетода, Разделитель, Ложь);
        КоличествоЭлементов      = МассивЭлементовПараметра.Количество();
        
        Для Н = 0 По МассивЭлементовПараметра.ВГраница() Цикл
            МассивЭлементовПараметра[Н] = СокрЛП(МассивЭлементовПараметра[Н]);
        КонецЦикла;
        
        Если КоличествоЭлементов < 4 Тогда
            
            Для Каждого Текущий Из МассивТекущих Цикл
                ТаблицаСостава.Удалить(Текущий);
            КонецЦикла;

            Возврат;
        КонецЕсли;
         
        Имя1С     = МассивЭлементовПараметра[0];
        Имя       = "--" + МассивЭлементовПараметра[3];
        Типы      = МассивЭлементовПараметра[1];
        Описание  = ?(КоличествоЭлементов >= 5, МассивЭлементовПараметра[4], МассивЭлементовПараметра[2]);
        
        Если КоличествоЭлементов > 5 Или СтрНайти(Имя, " ") > 0 Тогда
            Для Каждого Текущий Из МассивТекущих Цикл
                ТаблицаСостава.Удалить(Текущий);
            КонецЦикла;
            Возврат;
        КонецЕсли;

        Значение   = ПолучитьЗначениеПараметраПоУмолчанию(Имя1С, Метод);
        Библиотека = Модуль.ИмяБезрасширения;
        
        Если ЗначениеЗаполнено(Значение) Тогда
            Описание = Описание + " (необяз. по ум. - " + Значение + ")";
        КонецЕсли;
        
        НоваяСтрока = ТаблицаСостава.Добавить();
        НоваяСтрока.Библиотека  = Библиотека;
        НоваяСтрока.Модуль      = Библиотека;
        НоваяСтрока.Метод       = Метод.Signature.Name;
        НоваяСтрока.МетодПоиска = вРег(НоваяСтрока.Метод);
        НоваяСтрока.Описание    = Описание;
        НоваяСтрока.Область     = Область;
        НоваяСтрока.Параметр    = Имя;

        Если ЗначениеЗаполнено(ОписаниеМетода) Тогда
            НоваяСтрока.ОписаниеМетода = ОписаниеМетода;
        КонецЕсли;       

        МассивТекущих.Добавить(НоваяСтрока);

    КонецЦикла;
    
КонецПроцедуры

Функция ПолучитьЗначениеПараметраПоУмолчанию(Знач Имя, Знач Метод)
    
    Значение = "";
    
    Для Каждого ПараметрМетода Из Метод.Signature.Parameters Цикл
        
        Если ПараметрМетода.Name = Имя Тогда
            
            ЗначениеПараметра = ПараметрМетода.Value;
            Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
                Попытка
                    Значение = ЗначениеПараметра["Items"][0]["Value"];
                Исключение 
                    Значение = ЗначениеПараметра.Value;
                КонецПопытки;
                Значение = ?(ЗначениеЗаполнено(Значение), Значение, "Пустое значение");
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЦикла;
    
    Возврат Значение;
    
КонецФункции

Функция Синонимайзер(ИмяРеквизита)
    
    Перем Синоним, ъ, Символ, ПредСимвол, СледСимвол, Прописная, ПредПрописная, СледПрописная, ДлинаСтроки;
    
    Синоним = ВРег(Сред(ИмяРеквизита, 1, 1));
    ДлинаСтроки = СтрДлина(ИмяРеквизита);
    Для ъ=2 По ДлинаСтроки Цикл
        Символ = Сред(ИмяРеквизита, ъ, 1);
        ПредСимвол = Сред(ИмяРеквизита, ъ-1, 1);
        СледСимвол = Сред(ИмяРеквизита, ъ+1, 1);
        Прописная = Символ = ВРег(Символ);
        ПредПрописная = ПредСимвол = ВРег(ПредСимвол);
        СледПрописная = СледСимвол = ВРег(СледСимвол);
        
        // Варианты:
        Если НЕ ПредПрописная И Прописная Тогда
            Синоним = Синоним + " " + Символ;
        ИначеЕсли Прописная И НЕ СледПрописная Тогда
            Синоним = Синоним + " " + Символ;
        Иначе
            Синоним = Синоним + Символ;
        Конецесли;
    КонецЦикла;
    
    Синоним = ВРег(Лев(Синоним,1)) + нРег(Сред(Синоним,2));
    
    Возврат Синоним;
    
КонецФункции
